<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/tags/kotlin/feed</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/tags/kotlin/feed"/>
  <title>Kotlinタグが付けられた新着記事 - Qiita</title>
  <description>QiitaでKotlinタグが付けられた新着記事</description>
  <updated>2020-07-03T10:08:57+09:00</updated>
  <link>https://qiita.com/tags/kotlin</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1257200</id>
    <published>2020-07-03T10:08:57+09:00</published>
    <updated>2020-07-03T10:08:57+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/tanuki_/items/421bdfa45ae6545c255e"/>
    <url>https://qiita.com/tanuki_/items/421bdfa45ae6545c255e</url>
    <title>【Kotlin】BottomNavigationViewの上(top)のスペースを削除する方法</title>
    <content type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;変更前&lt;/th&gt;
&lt;th&gt;変更後&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F648721%2Fdc1eff9e-5f6f-872e-922a-4f6929c91aec.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=0cefdacd21dad5e5c9f318de11a5339c" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F648721%2Fdc1eff9e-5f6f-872e-922a-4f6929c91aec.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=0cefdacd21dad5e5c9f318de11a5339c" alt="Screenshot_1593738325.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/648721/dc1eff9e-5f6f-872e-922a-4f6929c91aec.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F648721%2Fdc1eff9e-5f6f-872e-922a-4f6929c91aec.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=1ac5e3ca0be7db8bf77bab084daa65ce 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F648721%2Fcacfb372-4407-c0b9-237f-935ae691d9ca.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=91c5a6aca8c3aa6d2dfff64e70f045f9" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F648721%2Fcacfb372-4407-c0b9-237f-935ae691d9ca.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=91c5a6aca8c3aa6d2dfff64e70f045f9" alt="Screenshot_1593738394.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/648721/cacfb372-4407-c0b9-237f-935ae691d9ca.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F648721%2Fcacfb372-4407-c0b9-237f-935ae691d9ca.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=858bb6f72e4d2e6e91ce93c1be72d6ea 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3&gt;
&lt;span id="対応策" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AF%BE%E5%BF%9C%E7%AD%96"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;対応策&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;activity_main_menu.xml&lt;/code&gt;をコードで描画し、&lt;br&gt;
&lt;code&gt;android:paddingTop="?attr/actionBarSize"&lt;/code&gt;を削除する&lt;/p&gt;

&lt;p&gt;下記が変更前です。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;androidx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraintlayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ConstraintLayout&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
    &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"@+id/container"&lt;/span&gt;
    &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;layout_width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;layout_height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;paddingTop&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"?attr/actionBarSize"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;下記が変更後です。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;&amp;lt;?&lt;/span&gt;&lt;span class="n"&gt;xml&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"1.0"&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;androidx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constraintlayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;widget&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ConstraintLayout&lt;/span&gt; &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="n"&gt;xmlns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
    &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"@+id/container"&lt;/span&gt;
    &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;layout_width&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;layout_height&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
    <author>
      <name>tanuki_</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1257196</id>
    <published>2020-07-03T10:01:31+09:00</published>
    <updated>2020-07-03T10:01:31+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/vram/items/2496a8cd51cc32ded877"/>
    <url>https://qiita.com/vram/items/2496a8cd51cc32ded877</url>
    <title>Kotlinでピンチイン／アウト操作を行う</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;Kotlinでピンチイン／アウトつまり拡大縮小のサンプルが世の中に無いので作成します。&lt;br&gt;
ついでにスクロール操作も作成します。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="準備" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%BA%96%E5%82%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;準備&lt;/h1&gt;

&lt;p&gt;CustomViewというViewクラスを継承するクラスを作成します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;sample.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AttributeSet&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Paint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Paint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;argb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;背景を緑っぽくして塗りつぶしています。&lt;br&gt;
これを配置しましょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;activity_main.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;LinearLayout&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;"vertical"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;com.example.&lt;/span&gt;&lt;span class="err"&gt;[アプリの名称].CustomView&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/customView"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;アプリの名称部分はcom.exampleと入力しているときの補完で自動的に入力されるかと思います。&lt;br&gt;
これをデザインビューで見るとすでに緑で表示されています。&lt;br&gt;
すでに裏ではコンパイルされているのでしょうか？&lt;/p&gt;

&lt;h1&gt;
&lt;span id="描画" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%8F%8F%E7%94%BB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;描画&lt;/h1&gt;

&lt;p&gt;onDraw内に追加して絵を描きます。&lt;br&gt;
拡大縮小がわかりやすいように線と丸を書きます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;draw.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;argb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;x0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;y0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nc"&gt;Float&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setStrokeWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;argb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;argb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setStrokeWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;30F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setAntiAlias&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setStyle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;STROKE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;線を3本引いて作る三角形と丸を書いています。&lt;br&gt;
x0とy0には画面横幅、縦幅の半分つまり中心の位置が入っています。&lt;/p&gt;

&lt;p&gt;ではピンチイン／アウトとスクロールを追加します。&lt;br&gt;
ついでにさっきのサンプルが&lt;strong&gt;Kotlinらしくない&lt;/strong&gt;と警告が出ていたのも修正します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;CustomView.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AttributeSet&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Paint&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Paint&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0F&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;y1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0F&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;x0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0F&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;y0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0F&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;scale&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1F&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onDraw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Canvas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;argb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;127&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;x0&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="m"&gt;2F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;y0&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="m"&gt;2F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strokeWidth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;15F&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;argb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nf"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;100F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nf"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nf"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;100F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nf"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nf"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;100F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nf"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nf"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nf"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;100F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;argb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;255&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strokeWidth&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;30F&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isAntiAlias&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
        &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Paint&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;STROKE&lt;/span&gt;
        &lt;span class="n"&gt;canvas&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;drawCircle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0F&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nf"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0F&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10F&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;xx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x0&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;yy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y0&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y1&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nd"&gt;@SuppressLint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"ClickableViewAccessibility"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onTouchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MotionEvent&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;mScaleDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onTouchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;mGestureDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onTouchEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;scaleListener&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;ScaleGestureDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SimpleOnScaleGestureListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onScale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;detector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ScaleGestureDetector&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="p"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;detector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scaleFactor&lt;/span&gt;
            &lt;span class="nf"&gt;invalidate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;gestureListener&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;GestureDetector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SimpleOnGestureListener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onScroll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;e1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MotionEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;e2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MotionEvent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;distanceX&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;distanceY&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Float&lt;/span&gt;
        &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;x1&lt;/span&gt; &lt;span class="p"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;distanceX&lt;/span&gt;
            &lt;span class="n"&gt;y1&lt;/span&gt; &lt;span class="p"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;distanceY&lt;/span&gt;
            &lt;span class="nf"&gt;invalidate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mScaleDetector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ScaleGestureDetector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaleListener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mGestureDetector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;GestureDetector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;gestureListener&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;x1,y1にはスクロール要求分を反映、scaleには拡大縮小率要求を反映。&lt;br&gt;
xx()とyy()で座標変換しています。&lt;/p&gt;

&lt;p&gt;これを実行するとピンチイン／アウトやスクロールが出来るようになります。&lt;br&gt;
コード補完で自動的に入力される部分を除くとほとんど何も書いてませんがそれでもちゃんと動作するようです。&lt;br&gt;
ちなみに&lt;strong&gt;invalidate()&lt;/strong&gt;は再描画です。&lt;/p&gt;

&lt;p&gt;MainActivityからCustomView内のメソッドを呼びたい場合は&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;MainActivity.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;customView&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;customView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;customView&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;メソッド名&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;のように呼び出します。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="最後に" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%9C%80%E5%BE%8C%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;最後に&lt;/h1&gt;

&lt;p&gt;よく使われそうなピンチイン／アウトやスクロールですが意外とKotlinでのやり方が書かれていないので参考にして頂ければと思います。&lt;/p&gt;

&lt;p&gt;こちらのサイトを参考にしています。&lt;br&gt;
&lt;a href="https://tech.pjin.jp/blog/2015/11/24/androidimageview%e3%82%92%e3%82%ab%e3%82%b9%e3%82%bf%e3%83%9e%e3%82%a4%e3%82%ba%e3%81%99%e3%82%8b%e3%80%90%e5%89%8d%e7%b7%a8-%e3%83%94%e3%83%b3%e3%83%81%e3%82%a4%e3%83%b3%e3%83%bb%e3%83%94%e3%83%b3/" rel="nofollow noopener" target="_blank"&gt;ImageViewをカスタマイズする【前編 ピンチイン・ピンチアウト】&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>vram</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1256998</id>
    <published>2020-07-03T02:45:43+09:00</published>
    <updated>2020-07-03T02:45:43+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/K4N4/items/9bab86f87883f90baa15"/>
    <url>https://qiita.com/K4N4/items/9bab86f87883f90baa15</url>
    <title>【Kotlin】onClickListenerのパターンとその使い分け方</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;　この記事では私がインプットした&lt;code&gt;onClickListener&lt;/code&gt;の3つの記法と、そのメリットデメリットを記しています。今回記していくのは3パターンですが、私が恣意的にチョイスしただけで、この3つが全てを網羅している事など無いので悪しからず。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="一つ目クラス全体に掛かるインターフェースを用いる" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%B8%80%E3%81%A4%E7%9B%AE%E3%82%AF%E3%83%A9%E3%82%B9%E5%85%A8%E4%BD%93%E3%81%AB%E6%8E%9B%E3%81%8B%E3%82%8B%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%82%92%E7%94%A8%E3%81%84%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;一つ目：クラス全体に掛かるインターフェースを用いる&lt;/h2&gt;

&lt;p&gt;　MainActivityに実装すると仮定したとき、クラス自体に&lt;code&gt;View.OnClickListener&lt;/code&gt;のインターフェースを参照します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;class MainActivity : AppCompatActivity(), View.OnClickListener {

　　 override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        button1.setOnClickListener(this)
    }

     override fun onClick(v: View) {
        val b = v as Button
        textView.text = "${b.text} is pushed"   
    }
}
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この方法のメリットは、&lt;strong&gt;インターフェースから実装するのでミスが減る&lt;/strong&gt;という事と、&lt;strong&gt;冗長なボタン処理をonCreate内に書かずに済む&lt;/strong&gt;という事、&lt;strong&gt;複数のボタンに同じ処理を簡単に実装する事&lt;/strong&gt;などが挙げられます。ボタンごとに異なる処理を書かないといけないときなどは、かえって分かりにくくなる場合もあるので、考えて使う必要があります。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="二つ目個々のボタンにメソッドを実装する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%BA%8C%E3%81%A4%E7%9B%AE%E5%80%8B%E3%80%85%E3%81%AE%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AB%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;二つ目：個々のボタンにメソッドを実装する&lt;/h2&gt;

&lt;p&gt;　各ボタンに&lt;code&gt;setOnClickListener&lt;/code&gt;メソッドを実装する方法です。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;class MainActivity : AppCompatActivity(){
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        button2.setOnClickListener {
            val b = it as Button
            textView.text = "${it.text} is pushed"
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この方法は、&lt;strong&gt;複数個のボタンのそれぞれに全く異なる処理を実装させるとき&lt;/strong&gt;に便利です。各ボタンそれぞれに処理を書いていくので、処理が同じ複数のボタンがあるときには向きません。また、各ボタンについて書いていくので、全体としてコードが冗長になりがちです。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="三つ目変数に処理を代入する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%B8%89%E3%81%A4%E7%9B%AE%E5%A4%89%E6%95%B0%E3%81%AB%E5%87%A6%E7%90%86%E3%82%92%E4%BB%A3%E5%85%A5%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;三つ目：変数に処理を代入する&lt;/h1&gt;

&lt;p&gt;　ある変数に&lt;code&gt;View.OnClickListener&lt;/code&gt;を介して処理を実装します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val listener = View.OnClickListener {
            val b = it as Button
            textView.text = "${b.text} is pushed"
        }
        button3.setOnClickListener(listener)

    }
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;今回は&lt;code&gt;listener&lt;/code&gt;という変数に処理を記述し、&lt;code&gt;setOnClickListener(listener)&lt;/code&gt;でボタンに適用させています。この方法のメリットは、&lt;strong&gt;複数個のボタンに同じ処理を適用させやすい事&lt;/strong&gt;や、&lt;strong&gt;そういったケースが複数種類あるときも簡潔に記述できる事&lt;/strong&gt;にあります。しかし、処理が複雑になるとonCreate内が冗長になってしまうというデメリットがあります。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="さいごに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;さいごに&lt;/h1&gt;

&lt;p&gt;　今回は以上三つの方法と、そのメリットデメリットについてまとめました。勿論、細かい記法を変えることでさらにスマートに記述できるかもしれませんが、分かりやすさも兼ねてあの状態で記しておきます。意外とクリック処理を体系的にまとめている記事が無かったので、お役に立てれば幸いです。&lt;/p&gt;
</content>
    <author>
      <name>K4N4</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1256851</id>
    <published>2020-07-02T21:35:50+09:00</published>
    <updated>2020-07-02T21:35:50+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/yamachita0109/items/81c2c3d24f873597325a"/>
    <url>https://qiita.com/yamachita0109/items/81c2c3d24f873597325a</url>
    <title>[Android]自動スクロールで手を動かすことなく実機確認を行う</title>
    <content type="html">&lt;p&gt;一覧など、無限スクロールが存在する機能を使用するときに、実機にかかる負担をAndroidStudioのMemory Profilerで監視をし&lt;del&gt;重箱の隅をつつく&lt;/del&gt;品質をチェックしているのだが、手で動かすのがだるい。&lt;/p&gt;

&lt;p&gt;なので、無限スクロール自動化をしてみた。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="samplecode" class="fragment"&gt;&lt;/span&gt;&lt;a href="#samplecode"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;SampleCode&lt;/h1&gt;

&lt;p&gt;簡単にRecyclerViewのSampleコードを実装したので、こちらを使用する。&lt;br&gt;
&lt;a href="https://github.com/yamachita0109/RecyclerView" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/yamachita0109/RecyclerView&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="実際に自動scrollしてみた" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AE%9F%E9%9A%9B%E3%81%AB%E8%87%AA%E5%8B%95scroll%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;実際に自動scrollしてみた&lt;/h1&gt;

&lt;p&gt;下記コマンドをコマンドラインに貼り付ければOK。&lt;br&gt;
もっと細かい値を指定したい場合は、&lt;a href="https://developer.android.com/studio/command-line/adb?hl=ja" rel="nofollow noopener" target="_blank"&gt;公式ドキュメント&lt;/a&gt;を参考にすること。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;$ while [ true ]; do
adb shell input swipe 521 1540 492 432
done;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="デモ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%87%E3%83%A2"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;デモ&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/f9b71546-4c14-6dd6-7911-0d075e864ea6.gif" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/f9b71546-4c14-6dd6-7911-0d075e864ea6.gif" alt="demo.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300430/f9b71546-4c14-6dd6-7911-0d075e864ea6.gif" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="まとめ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%BE%E3%81%A8%E3%82%81"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;まとめ&lt;/h1&gt;

&lt;p&gt;・RecyclerViewをスクラッチで実装したのは初めて、もっと美しく実装して、実サービスに耐えうる形にしたいなぁ。&lt;/p&gt;

&lt;p&gt;・adbコマンドでなんでもことが発覚。&lt;br&gt;
実機操作を記憶して、スクリプト化することもできるそうな。&lt;br&gt;
ちょっと試してみようかな。&lt;/p&gt;

&lt;p&gt;・他にもっと便利なadbコマンドの使い方がある方は是非教えてください！！&lt;/p&gt;
</content>
    <author>
      <name>yamachita0109</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1256548</id>
    <published>2020-07-02T11:08:28+09:00</published>
    <updated>2020-07-02T11:08:28+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/tanuki_/items/d1619612040edb36f101"/>
    <url>https://qiita.com/tanuki_/items/d1619612040edb36f101</url>
    <title>【Kotlin】FragmentでListViewにCustomAdapterを採用する際の書き方</title>
    <content type="html">
&lt;h3&gt;
&lt;span id="fragmentにlistviewを表示した理由" class="fragment"&gt;&lt;/span&gt;&lt;a href="#fragment%E3%81%ABlistview%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E7%90%86%E7%94%B1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FragmentにListViewを表示した理由&lt;/h3&gt;

&lt;p&gt;iOS先行でAndroidでもデザインを模倣したくて、&lt;br&gt;
&lt;code&gt;BottomNavigationView&lt;/code&gt;を採用しました。&lt;/p&gt;

&lt;p&gt;その際に不慣れな&lt;code&gt;Fragment&lt;/code&gt;に&lt;code&gt;ListView&lt;/code&gt;を設定してハマったので備忘録として残しておきます。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="notificationfragmentkt" class="fragment"&gt;&lt;/span&gt;&lt;a href="#notificationfragmentkt"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;NotificationFragment.kt&lt;/h3&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.android.yoichi.ui.notification&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.Bundle&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.LayoutInflater&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.View&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.ViewGroup&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.fragment.app.Fragment&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.android.yoichi.CustomAdapter&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.android.yoichi.R&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.android.yoichi.model.notificationModel&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;kotlinx.android.synthetic.main.fragment_notification.*&lt;/span&gt;


&lt;span class="c1"&gt;// TODO: Rename parameter arguments, choose names that match&lt;/span&gt;
&lt;span class="c1"&gt;// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;ARG_PARAM1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"param1"&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;ARG_PARAM2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"param2"&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * A simple [Fragment] subclass.&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * Use the [NotificationFragment.newInstance] factory method to&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * create an instance of this fragment.&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NotificationFragment&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Fragment&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// TODO: Rename and change types of parameters&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;


    &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;mCustomAdapter&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;CustomAdapter&lt;/span&gt;


    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;param1&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ARG_PARAM1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;param2&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ARG_PARAM2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreateView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;inflater&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;LayoutInflater&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewGroup&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt;
        &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt;
    &lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;inflater&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fragment_notification&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onViewCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;noticationList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;listOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="nf"&gt;notificationModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"▼サーバーメンテナンス"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"明日からメンテナンスを行います"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="nf"&gt;notificationModel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"▼サーバーメンテナンス"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;"メンテナンス完了しました"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;mCustomAdapter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CustomAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;noticationList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nc"&gt;ListView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mCustomAdapter&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onViewCreated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;companion&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         * Use this factory method to create a new instance of&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         * this fragment using the provided parameters.&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         *&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         * @param param1 Parameter 1.&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         * @param param2 Parameter 2.&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         * @return A new instance of fragment NotificationFragment.&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         */&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO: Rename and change types and number of parameters&lt;/span&gt;
        &lt;span class="nd"&gt;@JvmStatic&lt;/span&gt;
        &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;newInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="nc"&gt;NotificationFragment&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="nf"&gt;putString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ARG_PARAM1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nf"&gt;putString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ARG_PARAM2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;param2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&lt;/code&gt;&lt;br&gt;
こちらに処理を記載しなかった事で表示にアプリがクラッシュしていました。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="おまけcustomadapter" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%8A%E3%81%BE%E3%81%91customadapter"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;おまけ：CustomAdapter&lt;/h3&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.android.yoichi&lt;/span&gt;

&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.Context&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.LayoutInflater&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.View&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.view.ViewGroup&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.widget.ArrayAdapter&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.widget.TextView&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;androidx.fragment.app.FragmentActivity&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;com.android.yoichi.model.notificationModel&lt;/span&gt;


&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;notificationList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;notification&lt;/span&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ArrayAdapter&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;notification&lt;/span&gt;&lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;notificationList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;layoutInflater&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;getSystemService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LAYOUT_INFLATER_SERVICE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nc"&gt;LayoutInflater&lt;/span&gt;


    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;convertView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewGroup&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;View&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// レイアウトの設定&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;view&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;convertView&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;convertView&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;view&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;layoutInflater&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inflate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notification_item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// 各Viewの設定&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;notificationTitle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notificationTitle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;notificationTitle&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"title"&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;notificationContent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;TextView&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;notificationContent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;notificationContent&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"Content"&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;view&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
    <author>
      <name>tanuki_</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1256522</id>
    <published>2020-07-02T10:29:32+09:00</published>
    <updated>2020-07-02T10:29:32+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/HiroyukiTamura/items/88ef8832955617edcdd1"/>
    <url>https://qiita.com/HiroyukiTamura/items/88ef8832955617edcdd1</url>
    <title>[Android]インストラメント化テストとローカルテストでコードを共有するには</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;Androidプロジェクトのテストは、テストの実行環境で以下のふたつに分けられます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ローカルテスト&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;module-name/src/test/java/&lt;/code&gt; にあります。&lt;br&gt;
マシンのJVM上で実行されるため、実行時間・リソースがより少なく済みます。&lt;br&gt;
Androidフレームワークを必要に応じてモックする必要があります。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;インストラメント化テスト&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;module-name/src/androidTest/java/&lt;/code&gt; にあります。&lt;br&gt;
実機またはエミュレータ上で実行するため、再現性が高く実行時間・リソースがより多くかかります。&lt;br&gt;
Instrumentation APIからContextなどの値を参照できます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
&lt;span id="テストソースにファイルを追加する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%86%E3%82%B9%E3%83%88%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;テストソースにファイルを追加する&lt;/h1&gt;

&lt;p&gt;これらのテストでコードを共有したり、任意のファイルを参照するには、gradleでテストソースを指定します。&lt;/p&gt;

&lt;p&gt;例えば、ローカルテスト・インストラメント化テストでコードを共有したい場合、&lt;br&gt;
&lt;code&gt;module-name/src/sharedTest/java/{アプリのパッケージ名}&lt;/code&gt;配下にファイルを作成し、アプリモジュールのbuild.gradleでテストソースを追加します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="gradle"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;android&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="o"&gt;...&lt;/span&gt;
   &lt;span class="k"&gt;sourceSets&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
       &lt;span class="n"&gt;androidTest&lt;/span&gt; 
           &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;srcDirs&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="err"&gt;"&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="s"&gt;/sharedTest/&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;
       &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
           &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;srcDirs&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;"src/sharedTest/java"&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="参考記事" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8F%82%E8%80%83%E8%A8%98%E4%BA%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;参考記事&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://proandroiddev.com/sharing-code-between-local-and-instrumentation-tests-c0b57ebd3200" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://proandroiddev.com/sharing-code-between-local-and-instrumentation-tests-c0b57ebd3200&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>HiroyukiTamura</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1256011</id>
    <published>2020-07-01T18:37:44+09:00</published>
    <updated>2020-07-01T18:37:44+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/tick-taku/items/ea3dd528030f4992b64d"/>
    <url>https://qiita.com/tick-taku/items/ea3dd528030f4992b64d</url>
    <title>Android の実行環境</title>
    <content type="html">&lt;p&gt;配属された新人のトレーナーになったので Android のコーチングをしているわけですが&lt;br&gt;
上手く言語化できない部分があったので自分なりに纏めました。&lt;/p&gt;

&lt;p&gt;間違い等コメントいただけると嬉しいです🙋&lt;/p&gt;

&lt;h2&gt;
&lt;span id="java" class="fragment"&gt;&lt;/span&gt;&lt;a href="#java"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Java&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;クラスベースのオブジェクト指向型プログラミング言語

&lt;ul&gt;
&lt;li&gt;処理速度が速い&lt;/li&gt;
&lt;li&gt;プラットフォームに依存しない&lt;/li&gt;
&lt;li&gt;オブジェクト指向&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
&lt;span id="jvm" class="fragment"&gt;&lt;/span&gt;&lt;a href="#jvm"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;JVM&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Java Virtual Machine&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java アプリケーションを動かすためのソフトウェア

&lt;ul&gt;
&lt;li&gt;JVM が各 OS 向けに Java クラスファイルをコンバートする事でアプリケーションが動作する&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java プログラム (.java) をコンパイルすると Java クラスファイル (.class) が出来上がる。&lt;br&gt;
Java クラスファイルを JVM が各 OS 向けにバイトコードに変換してアプリケーションを動かしている。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F308397%2F1ef489b8-c840-a3bc-2eef-44411db5d254.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=407fd146a2909384bfc2c64313803ecc" target="_blank" rel="nofollow noopener"&gt;&lt;img width="815" alt="jvm_flow.png" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F308397%2F1ef489b8-c840-a3bc-2eef-44411db5d254.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=407fd146a2909384bfc2c64313803ecc" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/308397/1ef489b8-c840-a3bc-2eef-44411db5d254.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F308397%2F1ef489b8-c840-a3bc-2eef-44411db5d254.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=7f83aa68169277cc7469a2b6eb3e269f 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Java の特徴である &lt;code&gt;プラットフォームに依存しない&lt;/code&gt; とはこのため。&lt;br&gt;
デメリットとしては、動作環境のセットアップのハードルが他より少し高い。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="jre" class="fragment"&gt;&lt;/span&gt;&lt;a href="#jre"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;JRE&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Java Runtime Environment&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java アプリケーションの実行環境

&lt;ul&gt;
&lt;li&gt;JVM + 対応した API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OS に JRE をインストールすることで Java アプリケーションを実行する事ができる。&lt;br&gt;
ただしコンパイラ等がないので開発はできない。&lt;br&gt;
現在は JRE 単独でインストールできず、JDK をインストールする必要がある。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="jdk" class="fragment"&gt;&lt;/span&gt;&lt;a href="#jdk"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;JDK&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;Java Development Kit&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java でプログラミングするための開発ツール

&lt;ul&gt;
&lt;li&gt;JRE + コンパイラやデバッガーのプログラム等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F308397%2Ffc1ada19-5099-3762-e008-2aed019b1d53.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=7eeab72fd798c61a5f860bf14196cfe8" target="_blank" rel="nofollow noopener"&gt;&lt;img width="814" alt="jvm.png" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F308397%2Ffc1ada19-5099-3762-e008-2aed019b1d53.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=7eeab72fd798c61a5f860bf14196cfe8" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/308397/fc1ada19-5099-3762-e008-2aed019b1d53.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F308397%2Ffc1ada19-5099-3762-e008-2aed019b1d53.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=3af3d6920988ccaec2d049a6fa0f6733 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
&lt;span id="android-の実行環境" class="fragment"&gt;&lt;/span&gt;&lt;a href="#android-%E3%81%AE%E5%AE%9F%E8%A1%8C%E7%92%B0%E5%A2%83"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Android の実行環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Android アプリは .apk ファイル に含まれている .dex ファイルで動作する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Android アプリはコンパイル時に .class ファイル内のバイトコードから .dex ファイルを生成する。&lt;br&gt;
ART (旧 Dalvik) は生成された .dex ファイルを読み込んでアプリを動作させる。&lt;br&gt;
そのため Java 言語で開発が可能だし、&lt;strong&gt;Android は JVM で動いているわけではない&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F308397%2F6466514a-30f9-f561-ff35-d61d55ab3bbf.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=2be1aa7cf4431a329c389ddc82305401" target="_blank" rel="nofollow noopener"&gt;&lt;img width="816" alt="art_flow.png" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F308397%2F6466514a-30f9-f561-ff35-d61d55ab3bbf.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=2be1aa7cf4431a329c389ddc82305401" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/308397/6466514a-30f9-f561-ff35-d61d55ab3bbf.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F308397%2F6466514a-30f9-f561-ff35-d61d55ab3bbf.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=056c7b4946351c416cca4ea33323ec26 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;span id="art-と-dalvik" class="fragment"&gt;&lt;/span&gt;&lt;a href="#art-%E3%81%A8-dalvik"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ART と Dalvik&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;ART と Dalvik ではコンパイル方式が違う&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;Runtime&lt;/th&gt;
&lt;th style="text-align: center"&gt;Compiler&lt;/th&gt;
&lt;th style="text-align: left"&gt;いつコンパイルされるか&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;ART&lt;/td&gt;
&lt;td style="text-align: center"&gt;AOT (A Head Of Time)&lt;/td&gt;
&lt;td style="text-align: left"&gt;インストール時&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;Dalvik&lt;/td&gt;
&lt;td style="text-align: center"&gt;JIT (Just In Time)&lt;/td&gt;
&lt;td style="text-align: left"&gt;プログラム実行時&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;AOT だとプログラム実行時のオーバーヘッドがなくなることで、動作の高速化や省電力化に繋がる。&lt;br&gt;
Android 4.4 から ART にリプレイスされていった。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="kotlin" class="fragment"&gt;&lt;/span&gt;&lt;a href="#kotlin"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Kotlin&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;JVM 上で動作するオブジェクト指向言語

&lt;ul&gt;
&lt;li&gt;JDK が必要&lt;/li&gt;
&lt;li&gt;Java &amp;lt;-&amp;gt; Kotlin の相互運用が可能&lt;/li&gt;
&lt;li&gt;実用的で Java より書きやすいけど JVM で動くので OS に依存しない 👏😄&lt;/li&gt;
&lt;li&gt;Android 用の extension が提供されている&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://github.com/JetBrains/kotlin" rel="nofollow noopener" target="_blank"&gt;GitHub - JetBrains/kotlin: The Kotlin Programming Language&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;span id="kotlin-stdlib" class="fragment"&gt;&lt;/span&gt;&lt;a href="#kotlin-stdlib"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;kotlin-stdlib&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Kotlin を使うためのコアライブラリ

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;stdlib-jdk&lt;/code&gt; は extension&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;
&lt;span id="kotlin-stdlib-jre-の-deprecate" class="fragment"&gt;&lt;/span&gt;&lt;a href="#kotlin-stdlib-jre-%E3%81%AE-deprecate"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;kotlin-stdlib-jre の Deprecate&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Java 9 モジュールシステムをサポートするために stdlib-jdk に移行された

&lt;ul&gt;
&lt;li&gt;Kotlin 1.3 から使用も禁止された&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://kotlinlang.org/docs/reference/whatsnew12.html#kotlin-standard-library-artifacts-and-split-packages" rel="nofollow noopener" target="_blank"&gt;What's New in Kotlin 1.2 - Kotlin Programming Language&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Kotlin standard library is now fully compatible with the Java 9 module system, which forbids split packages (multiple jar files declaring classes in the same package). In order to support that, new artifacts kotlin-stdlib-jdk7 and kotlin-stdlib-jdk8 are introduced, which replace the old kotlin-stdlib-jre7 and kotlin-stdlib-jre8.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以下の様なライブラリのユースケースが解説されていました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;Library&lt;/th&gt;
&lt;th style="text-align: center"&gt;使用パターン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;stdlib&lt;/td&gt;
&lt;td style="text-align: center"&gt;minSdkVersion &amp;lt; 21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;stdlib-jdk7&lt;/td&gt;
&lt;td style="text-align: center"&gt;minSdkVersion &amp;gt;= 21&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;stdlib-jdk8&lt;/td&gt;
&lt;td style="text-align: center"&gt;minSdkVersion &amp;gt;= 24&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a href="https://qiita.com/takahirom/items/52a092550ce3931c717b" id="reference-4577a81b9168350bcfaa"&gt;Androidの開発でkotlin-stdlib, kotlin-stdlib-jre7, kotlin-stdlib-jdk7, kotlin-stdlib-jdk8どれ使えばいいの問題 - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
&lt;span id="参考" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8F%82%E8%80%83"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://www.javadrive.jp/start/install/index5.html" rel="nofollow noopener" target="_blank"&gt;Java SEとJDK、JRE、JVMの違いに関する解説 | Java入門&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://source.android.google.cn/devices/tech/dalvik?hl=ja" rel="nofollow noopener" target="_blank"&gt;Android ランタイム（ART）と Dalvik  |  Android オープンソース プロジェクト&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.slideshare.net/yyyank/vm-dalvikartjava-vm" rel="nofollow noopener" target="_blank"&gt;VMの歩む道。 Dalvik、ART、そしてJava VM&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>tick-taku</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1256010</id>
    <published>2020-07-01T18:37:16+09:00</published>
    <updated>2020-07-02T09:32:02+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/s_nozaki/items/64d7766e139c80ce6cb6"/>
    <url>https://qiita.com/s_nozaki/items/64d7766e139c80ce6cb6</url>
    <title>Kotlinのinfix</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="これは何か" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%93%E3%82%8C%E3%81%AF%E4%BD%95%E3%81%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;これは何か&lt;/h1&gt;

&lt;p&gt;kotlinの予約語、infixってなんやねんって思っちゃったので定義や作り方を調べてみました。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="目次" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%9B%AE%E6%AC%A1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;目次&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;なんとかfix&lt;/li&gt;
&lt;li&gt;標準ライブラリの例：「to」&lt;/li&gt;
&lt;li&gt;infixの関数を定義する&lt;/li&gt;
&lt;li&gt;定義したinfixの関数をKotlinから呼び出す&lt;/li&gt;
&lt;li&gt;定義したinfixの関数をJavaから呼び出す&lt;/li&gt;
&lt;li&gt;infix関数を逆アセンブルする&lt;/li&gt;
&lt;li&gt;参考&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
&lt;span id="なんとかfix" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8Bfix"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;なんとかfix&lt;/h1&gt;

&lt;p&gt;そもそも。infixってなんやねん。英単語を知らない（笑）&lt;br&gt;
Google翻訳にかけると、「中置」って返ってくる。&lt;br&gt;
ここで気づいた、なんとかfixの一個だこれ。他にもよく使ってるなんとかfixがある。&lt;br&gt;
prefix、suffix。&lt;br&gt;
中置きの文字通り、オブジェクトや値の間にinfix関数を置いて、挟まれた2つのオブジェクトや値を引数に処理を行う関数を定義できるKotlinの機能である。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="標準ライブラリの例to" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%A8%99%E6%BA%96%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E4%BE%8Bto"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;標準ライブラリの例：「to」&lt;/h1&gt;

&lt;p&gt;標準ライブラリのinfix関数 &lt;code&gt;to&lt;/code&gt; は、下記のように呼び出して &lt;code&gt;Pair&lt;/code&gt; インスタンスを生成する。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;Pair.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"key"&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s"&gt;"value"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;メソッドは、下記のように拡張関数として定義されている。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;Standard.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;

&lt;/span&gt;&lt;span class="cm"&gt; * Creates a tuple of type [Pair] from this and [that]. &lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * &lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * This can be useful for creating [Map] literals with less noise, for example: &lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * @sample samples.collections.Maps.Instantiation.mapFromPairs &lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;infix&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;参考：&lt;a href="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Tuples.kt" rel="nofollow noopener" target="_blank"&gt;Tuples.kt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;それでは、infix関数を自作してみたい。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="infixの関数を定義する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#infix%E3%81%AE%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;infixの関数を定義する&lt;/h1&gt;

&lt;p&gt;よく遭遇するような、「同じようなオブジェクトを持っている、似ているオブジェクトのインスタンスに値を詰め替える」ケースを想定する。&lt;br&gt;
ここでは、&lt;code&gt;Customer&lt;/code&gt;クラスの値に履歴シーケンスをくっつけて&lt;code&gt;CustomerHistory&lt;/code&gt;クラスのインスタンスを生成し、それらのインスタンスをジェネリクスに含む&lt;code&gt;Pair&lt;/code&gt;インスタンスを返す関数を作る。&lt;/p&gt;

&lt;p&gt;まずはインプットと合成の結果となるデータクラスを定義。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;Data.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;data class&lt;/span&gt; &lt;span class="nc"&gt;CustomerHistory&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;元ネタである&lt;code&gt;Customer&lt;/code&gt;から、シーケンス付きで&lt;code&gt;CustomerHistory&lt;/code&gt;インスタンスを生成するinfix関数を、以下のように定義する。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;Infix.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * 拡張関数内部でレシーバをthisとして扱っている。シーケンスは関数の引数として受け取る。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;infix&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mapToHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CustomerHistory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nc"&gt;CustomerHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;seq&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;これで準備完了。さて、Kotlinコード、およびJavaコードから定義したinfix関数を呼んでみる。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="定義したinfixの関数をkotlinから呼び出す" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9Finfix%E3%81%AE%E9%96%A2%E6%95%B0%E3%82%92kotlin%E3%81%8B%E3%82%89%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;定義したinfixの関数をKotlinから呼び出す&lt;/h1&gt;

&lt;p&gt;上記で定義した自作infix関数を呼び出す。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;Caller.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 元ネタ。&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;customer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"00001"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Eron Musk"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;// 元ネタと履歴オブジェクトのPairをシーケンス付きで返す。&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CustomerHistory&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt; &lt;span class="n"&gt;mapToHistory&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;定義した関数が、例としてよくなかったのでありがたみがわかづらいけども、オブジェクトや値の間に定義した関数を置くことで結果を得られる。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="定義したinfixの関数をjavaから呼び出す" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AE%9A%E7%BE%A9%E3%81%97%E3%81%9Finfix%E3%81%AE%E9%96%A2%E6%95%B0%E3%82%92java%E3%81%8B%E3%82%89%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;定義したinfixの関数をJavaから呼び出す&lt;/h1&gt;

&lt;p&gt;Kotlinの相互運用性により、Javaからも呼び出しが可能である。&lt;br&gt;
同じような呼び出しのスニペットを、Javaでもやってみると&lt;/p&gt;

&lt;div class="code-frame" data-lang="java"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;Caller.java&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**
 * 戻り値は、Kotlinのライブラリに含まれるkotlin.Pairをimportして定義する。
 */&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printHistory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Customer&lt;/span&gt; &lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CustomerHistory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;customerHistory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;InfixKt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;mapToHistory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;customer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;やはりなんとなく予想はついてたけど、Javaからみるとinfix関数はstaticメソッドになっている。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="infix関数を逆アセンブルする" class="fragment"&gt;&lt;/span&gt;&lt;a href="#infix%E9%96%A2%E6%95%B0%E3%82%92%E9%80%86%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AB%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;infix関数を逆アセンブルする&lt;/h1&gt;

&lt;p&gt;定義したKotlinファイルは&lt;code&gt;kotlinc&lt;/code&gt;でコンパイルした。&lt;/p&gt;

&lt;p&gt;Javaからの呼び出しを見ることで命令手続きは大方想像がつくんだけども、気になる。&lt;br&gt;
ということで、コンパイルされたKotlinファイル（クラスファイル）を逆アセンブルしてみる。&lt;/p&gt;

&lt;div class="code-frame" data-lang="java"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;
&lt;span class="nl"&gt;mac:&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;javap&lt;/span&gt; &lt;span class="nc"&gt;InfixKt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;span class="nc"&gt;Compiled&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s"&gt;"Infix.kt"&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InfixKt&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;kotlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CustomerHistory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;mapToHistory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;めちゃくちゃ想像どおりだった...クラスのない、もしくは複数クラスをもつKotlinファイルは、コンパイルされると&amp;lt;file name&amp;gt;Ktと命名される。もとのファイル名は &lt;code&gt;Infix.kt&lt;/code&gt;だった。&lt;br&gt;
逆アセンブルの結果を見ると、finalなクラスに内包されたstaticメソッドになっている。&lt;/p&gt;

&lt;p&gt;2020-07-02：追記&lt;br&gt;
staticメソッドになっているのは、自作した関数が拡張関数であるためでした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;javap&lt;/code&gt;にオプションをつけて、もう少し詳しい情報を出力してみる。&lt;/p&gt;

&lt;div class="code-frame" data-lang="java"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;mac:&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;javap&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="nc"&gt;InfixKt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;class&lt;/span&gt;
&lt;span class="nc"&gt;Compiled&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="s"&gt;"Infix.kt"&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InfixKt&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;static&lt;/span&gt; &lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;kotlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Pair&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;CustomerHistory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;mapToHistory&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Customer&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="nl"&gt;Code:&lt;/span&gt;
       &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aload_0&lt;/span&gt;
       &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ldc&lt;/span&gt;           &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;                 &lt;span class="c1"&gt;// String $this$mapToHistory&lt;/span&gt;
       &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invokestatic&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;                 &lt;span class="c1"&gt;// Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V&lt;/span&gt;
       &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;           &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;                 &lt;span class="c1"&gt;// class kotlin/Pair&lt;/span&gt;
       &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dup&lt;/span&gt;
      &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aload_0&lt;/span&gt;
      &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt;           &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;                 &lt;span class="c1"&gt;// class CustomerHistory&lt;/span&gt;
      &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;dup&lt;/span&gt;
      &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aload_0&lt;/span&gt;
      &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invokevirtual&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;                 &lt;span class="c1"&gt;// Method Customer.getId:()Ljava/lang/String;&lt;/span&gt;
      &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;aload_0&lt;/span&gt;
      &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invokevirtual&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;29&lt;/span&gt;                 &lt;span class="c1"&gt;// Method Customer.getName:()Ljava/lang/String;&lt;/span&gt;
      &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;iload_1&lt;/span&gt;
      &lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invokespecial&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;33&lt;/span&gt;                 &lt;span class="c1"&gt;// Method CustomerHistory."&amp;lt;init&amp;gt;":(Ljava/lang/String;Ljava/lang/String;I)V&lt;/span&gt;
      &lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;invokespecial&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;                 &lt;span class="c1"&gt;// Method kotlin/Pair."&amp;lt;init&amp;gt;":(Ljava/lang/Object;Ljava/lang/Object;)V&lt;/span&gt;
      &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;areturn&lt;/span&gt;
    &lt;span class="nl"&gt;LineNumberTable:&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;23&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;
      &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;
    &lt;span class="nl"&gt;LocalVariableTable:&lt;/span&gt;
      &lt;span class="nc"&gt;Start&lt;/span&gt;  &lt;span class="nc"&gt;Length&lt;/span&gt;  &lt;span class="nc"&gt;Slot&lt;/span&gt;  &lt;span class="nc"&gt;Name&lt;/span&gt;   &lt;span class="nc"&gt;Signature&lt;/span&gt;
          &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;31&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="n"&gt;$this$mapToHistory&lt;/span&gt;   &lt;span class="nc"&gt;LCustomer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
          &lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;31&lt;/span&gt;     &lt;span class="mi"&gt;1&lt;/span&gt;   &lt;span class="n"&gt;seq&lt;/span&gt;   &lt;span class="no"&gt;I&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;やはり、コンパイルされたあとも見知ったJavaのオペコードになっているようである。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="3行まとめ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#3%E8%A1%8C%E3%81%BE%E3%81%A8%E3%82%81"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;3行まとめ&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;infixとは、中置きを指す言葉で接頭辞/接尾辞の間に位置するようなもの。&lt;/li&gt;
&lt;li&gt;infix関数は、値やオブジェクトの間に置いて処理を行う関数である。&lt;/li&gt;
&lt;li&gt;Javaからみると、staticメソッドのシンタックスシュガーのようになっている。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
&lt;span id="参考" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8F%82%E8%80%83"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;参考&lt;/h1&gt;

&lt;p&gt;書籍&lt;br&gt;
&lt;a href="https://www.amazon.co.jp/dp/4839961743/ref=cm_sw_em_r_mt_dp_U_h7N-EbPJP66J3" rel="nofollow noopener" target="_blank"&gt;Kotlinイン・アクション&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ウェブサイト&lt;br&gt;
&lt;a href="https://dogwood008.github.io/kotlin-web-site-ja/docs/reference/functions.html#%E4%B8%AD%E7%BD%AE%E8%A8%98%E6%B3%95" rel="nofollow noopener" target="_blank"&gt;中置き記法 - Kotlinリファレンス&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>s_nozaki</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1255947</id>
    <published>2020-07-01T17:17:49+09:00</published>
    <updated>2020-07-01T17:17:49+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/yamachita0109/items/8610e35cfe6f3aaa808b"/>
    <url>https://qiita.com/yamachita0109/items/8610e35cfe6f3aaa808b</url>
    <title>[Android]他の人のアプリを盗み見しよう</title>
    <content type="html">&lt;p&gt;業務上、競合他社アプリを&lt;del&gt;盗み見&lt;/del&gt;参考にしたく、ソースコードを拝見させていただくことがたまーにあるので、備忘録として残す。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="端末にインストール済みのandroidアプリをダウンロード" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%AB%AF%E6%9C%AB%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%B8%88%E3%81%BF%E3%81%AEandroid%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;端末にインストール済みのAndroidアプリをダウンロード&lt;/h1&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;# PC、デバイス間の接続ができているか確認
$ adb devices

# 対象のパッケージを検索
$ adb shell pm list packages -f | grep [ダウンロード対象のキーワード]
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ダウンロード対象のキーワードは会社名やアプリの名前を入力すれば大抵引っかかる。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;# 例
$ adb shell pm list packages -f | grep yamachita0109
package:/data/app/com.yamachita0109.voice-Q6HZbU2pgLu4T3FCQg74kg==/base.apk=com.yamachita0109.voice
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;標準出力された値を分解する。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;名&lt;/th&gt;
&lt;th style="text-align: left"&gt;値&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;APK保存先パス&lt;/td&gt;
&lt;td style="text-align: left"&gt;/data/app/com.yamachita0109.voice-Q6HZbU2pgLu4T3FCQg74kg==/&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;APKファイル名&lt;/td&gt;
&lt;td style="text-align: left"&gt;base.apk&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;アプリケーションID&lt;/td&gt;
&lt;td style="text-align: left"&gt;com.yamachita0109.voice&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;ダウンロード。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;# APK保存先パスを指定
$ adb pull [APK保存先パス]
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;# 例
$ adb pull /data/app/com.yamachita0109.voice-Q6HZbU2pgLu4T3FCQg74kg==/
/data/app/com.yamachita0109.voice-Q6HZbU2pgLu4T3FCQg74kg==/: 1 file pulled. 31.4 MB/s (9086342 bytes in 0.276s)

# APKファイルがダウンロードされている
$ ls com.yamachita0109.voice-Q6HZbU2pgLu4T3FCQg74kg\=\=/
base.apk    lib
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="apkファイルをデコンパイルする" class="fragment"&gt;&lt;/span&gt;&lt;a href="#apk%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%87%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;APKファイルをデコンパイルする&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/skylot/jadx" rel="nofollow noopener" target="_blank"&gt;jadx&lt;/a&gt;を使用する。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/skylot/jadx.git
cd jadx
./gradlew dist
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;JDK 8 or higher must be installed:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;なので注意すること。&lt;/p&gt;

&lt;p&gt;やっとデコンパイル。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;# Pathを通してもOK
$ build/jadx/bin/jadx --log-level error [APKファイルパス]
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;APKファイル名でフォルダが作成される。&lt;br&gt;
その中に、ソースコード類が入っているので、&lt;del&gt;盗み見&lt;/del&gt;参考にすることができる。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="まとめ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%BE%E3%81%A8%E3%82%81"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;まとめ&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;「甘い！！ 武術の伝承とはすなわち模倣から始まるのだよ！」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;史上最強の弟子ケンイチの登場人物、秋雨の名言である。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;「すべての独創は模倣から始まる」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ジャパネットたかたの創業者、髙田明の名言である。&lt;/p&gt;
</content>
    <author>
      <name>yamachita0109</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1254597</id>
    <published>2020-06-29T13:21:07+09:00</published>
    <updated>2020-06-30T15:24:50+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/190yamashita/items/a4c1851543dde46b09c1"/>
    <url>https://qiita.com/190yamashita/items/a4c1851543dde46b09c1</url>
    <title>Facebookアプリからのディープリンク【Android編】</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;※本記事では通常のwebなどからのディープリンクについては記載を割愛しますm(_ _)m&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://qiita.com/190yamashita/items/8fb8336432e854639c77" id="reference-7403a52a190f32ef686e"&gt;前回の記事&lt;/a&gt;に続き、今回はAndroidのFacebookアプリからディープリンクについてを記事にしたいと思います。&lt;br&gt;
有料（従量課金）のツールとか使えば楽できるみたいなのですが、今回のミッションはFacebookアプリからだけなのでお金をかけずにとのことでした。&lt;br&gt;
ので自前で実装することになったんですが…かなり苦戦しましたので記事にして残しておきたいと思います。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="実現方法" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AE%9F%E7%8F%BE%E6%96%B9%E6%B3%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;実現方法&lt;/h1&gt;

&lt;p&gt;どのように実現するか調べたらまず公式の&lt;a href="https://developers.facebook.com/docs/applinks/android" rel="nofollow noopener" target="_blank"&gt;App Links on Android&lt;/a&gt;が見つかりました。&lt;br&gt;
早速導入して試したんですが、全く機能せず…色いろ調べても解決方法が見つけられず…&lt;br&gt;
一旦諦めました（＞＜）&lt;/p&gt;

&lt;p&gt;が、ベテラン技術者の方に色々調べてもらいサーバ側にプログラムを仕組んだらできるのでは無いか？ということで試していただくことに。&lt;/p&gt;

&lt;p&gt;導入したのは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Chromeのintent&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.facebook.com/docs/applinks/android" rel="nofollow noopener" target="_blank"&gt;App Links on Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の２つを導入しました。&lt;br&gt;
が、おそらく&lt;a href="https://developers.facebook.com/docs/applinks/android" rel="nofollow noopener" target="_blank"&gt;App Links on Android&lt;/a&gt;だけで動くと思われますのでChromeのintentは概要だけ記載します。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="chromeのintent" class="fragment"&gt;&lt;/span&gt;&lt;a href="#chrome%E3%81%AEintent"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Chromeのintent&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://developers.facebook.com/docs/applinks/android" rel="nofollow noopener" target="_blank"&gt;App Links on Android&lt;/a&gt;以外にもintent起動する方法があって最初はこれを実装していました。&lt;br&gt;
以下が構成イメージです。meta情報を加工してリダイレクトするだけの割とシンプルな構成です。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F44cabd52-06f0-b2f5-2c0a-95dbae5c5c05.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=69dcd07695befd5d68c9bbcc216c750a" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F44cabd52-06f0-b2f5-2c0a-95dbae5c5c05.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=69dcd07695befd5d68c9bbcc216c750a" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/325497/44cabd52-06f0-b2f5-2c0a-95dbae5c5c05.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F44cabd52-06f0-b2f5-2c0a-95dbae5c5c05.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=effe6b0d19875939b436eb67a85f0fe0 1x" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
ただ古い機種（ASUS Zenfone4：Android8）ならうまくいくんですが、比較的新しい（Android10とか）の機種ではなぜかうまくいきませんでした。原因はわからないまま…&lt;br&gt;
なので次項の&lt;a href="https://developers.facebook.com/docs/applinks/android" rel="nofollow noopener" target="_blank"&gt;App Links on Android&lt;/a&gt;の導入に至りました。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="app-links-on-android" class="fragment"&gt;&lt;/span&gt;&lt;a href="#app-links-on-android"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;&lt;a href="https://developers.facebook.com/docs/applinks/android" rel="nofollow noopener" target="_blank"&gt;App Links on Android&lt;/a&gt;
&lt;/h1&gt;

&lt;p&gt;こちらが本題。以下のようなイメージ構成です。&lt;br&gt;
iOSの時と大差無いですが、違っているのはサーバ側にプログラムを仕組んだことです。&lt;br&gt;
通常のmetaデータだけだとFacebookアプリがうまくintent起動してくれないのでサーバ側でmetaデータを加工してあげることになりました。&lt;br&gt;
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F7481144f-96c0-5086-668b-d38b8a22ecf9.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=8cf1ffa097ec5bffe69ff3d84b5b2c46" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F7481144f-96c0-5086-668b-d38b8a22ecf9.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=8cf1ffa097ec5bffe69ff3d84b5b2c46" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/325497/7481144f-96c0-5086-668b-d38b8a22ecf9.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F325497%2F7481144f-96c0-5086-668b-d38b8a22ecf9.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=237cbcdd51cbcc322f3568053db17c43 1x" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
Androidの場合は①③④をFacebookアプリがやってくれます。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="サーバ側" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B5%E3%83%BC%E3%83%90%E5%81%B4"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;サーバ側&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://qiita.com/190yamashita/items/8fb8336432e854639c77"&gt;Facebookアプリからのディープリンク【iOS編】&lt;/a&gt;の時と同じようにサーバ側にページを用意し&lt;br&gt;
[&lt;a href="https://hogehoge.com" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://hogehoge.com&lt;/a&gt;]&lt;br&gt;
にアクセスがきたら用意したページに飛ぶようにサーバ側で設定します。&lt;br&gt;
今回はmetaデータの加工が必要なのでphpファイルを準備しました。&lt;/p&gt;

&lt;p&gt;そして、そのphpでmetaデータを加工する処理を仕組みます。&lt;br&gt;
※パラメータの解説は&lt;a href="https://www.eisbahn.jp/yoichiro/2014/05/app_links.html" rel="nofollow noopener" target="_blank"&gt;App Linksの技術文書を和訳してみました&lt;/a&gt;が参考になりました。&lt;/p&gt;

&lt;div class="code-frame" data-lang="php"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class="c1"&gt;// 定数定義&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ANDROID'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'IOS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'OTHER_OS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'FACEBOOK'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'OTHER_BROWSER'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'APP_NAME'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'あなたのアプリの名前'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ANDROID_STORE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://play.google.com/store/apps/details?id=あなたのアプリID'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ANDROID_SCHEME'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hogehoge-app'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ANDROID_CUSTOM_URL_HOST'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'hogehoge-link'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;define&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ANDROID_PACKAGE'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'あなたのアプリのパッケージ名'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// サーバ変数からホスト、url、ユーザエージェント取得&lt;/span&gt;
&lt;span class="nv"&gt;$httpHost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;HTTP_HOST&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$requestUri&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;REQUEST_URI&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="nv"&gt;$uerAgent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_SERVER&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;HTTP_USER_AGENT&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="nb"&gt;header&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Content-type: text/html; charset=utf-8"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="nv"&gt;$os&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findOS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$uerAgent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nv"&gt;$browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;findFacebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$uerAgent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$os&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ANDROID&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$browser&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;FACEBOOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nv"&gt;$host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ANDROID_CUSTOM_URL_HOST&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nv"&gt;$scheme&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ANDROID_SCHEME&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// metaデータに出力するlink&lt;/span&gt;
    &lt;span class="nv"&gt;$androidDeeplink&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$scheme&lt;/span&gt;&lt;span class="s2"&gt;://&lt;/span&gt;&lt;span class="nv"&gt;$host$requestUri&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;findOS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$uerAgent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;preg_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/Android/ui'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$uerAgent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;ANDROID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;preg_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/iPhone|iPod|iPad/ui'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$uerAgent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;IOS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;OTHER_OS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;findFacebook&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$uerAgent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;preg_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/FB_IAB/ui'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$uerAgent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;FACEBOOK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;preg_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/facebook/ui'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;$uerAgent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;FACEBOOK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;OTHER_BROWSER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"al:web:should_redirect"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"viewport"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"width=device-width,initial-scale=1"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"al:android:package"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;ANDROID_PACKAGE&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!-- ここで加工したlinkを出力。このmetaタグでFacebookアプリが動いてくれる --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"al:android:url"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$androidDeeplink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;property=&lt;/span&gt;&lt;span class="s"&gt;"al:android:app_name"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;APP_NAME&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="c"&gt;&amp;lt;!-- キャッシュは無効にしておく（でも、多分OGP情報のキャッシュには無力と思われる） --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"cache-control"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"max-age=0"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"cache-control"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"no-cache"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"expires"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"-1"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"expires"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"Tue, 31 May 2011 10:15:00 GMT+3"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;http-equiv=&lt;/span&gt;&lt;span class="s"&gt;"pragma"&lt;/span&gt; &lt;span class="na"&gt;content=&lt;/span&gt;&lt;span class="s"&gt;"no-cache"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&lt;/span&gt; &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"font-size: medium;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="c"&gt;&amp;lt;!-- アプリがインストールされていない場合ストアに遷移させる --&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$os&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;ANDROID&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nv"&gt;$browser&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="nx"&gt;FACEBOOK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;onload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="nx"&gt;ANDROID_STORE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;3000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;※自分のAndroidは&lt;a href="https://play.google.com/store/apps" rel="nofollow noopener" target="_blank"&gt;Play Store&lt;/a&gt;で探しましょう。&lt;br&gt;
※Androidの説明なので&lt;strong&gt;&lt;font color="red"&gt;iOSの記載は省略&lt;/font&gt;&lt;/strong&gt;しています。iOSも同じurlを使う場合は&lt;a href="https://qiita.com/190yamashita/items/8fb8336432e854639c77"&gt;Facebookアプリからのディープリンク【iOS編】&lt;/a&gt;の処理をphpファイルに移植してください。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="アプリ側" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%A2%E3%83%97%E3%83%AA%E5%81%B4"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;アプリ側&lt;/h3&gt;

&lt;p&gt;まずはintent起動できるようにAndroidManifest.xmlに追記します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;
        &lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;".DeepLinkActivity"&lt;/span&gt;
            &lt;span class="na"&gt;android:launchMode=&lt;/span&gt;&lt;span class="s"&gt;"singleTop"&lt;/span&gt;
            &lt;span class="na"&gt;android:noHistory=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
            &lt;span class="na"&gt;android:screenOrientation=&lt;/span&gt;&lt;span class="s"&gt;"portrait"&lt;/span&gt;
            &lt;span class="na"&gt;android:theme=&lt;/span&gt;&lt;span class="s"&gt;"@style/AppTheme.NoActionBar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="c"&gt;&amp;lt;!-- app linkとfacebookアプリからのアプリを起動は共存できないのでapp linkは使わない。 --&amp;gt;&lt;/span&gt;

            &lt;span class="c"&gt;&amp;lt;!-- deep link for facebook app --&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.intent.action.VIEW"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.intent.category.DEFAULT"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.intent.category.BROWSABLE"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class="c"&gt;&amp;lt;!-- dataタグのschemeとhostはphpで定義したANDROID_SCHEMEとANDROID_CUSTOM_URL_HOSTに合わせます --&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;data&lt;/span&gt; &lt;span class="na"&gt;android:scheme=&lt;/span&gt;&lt;span class="s"&gt;"hogehoge-app"&lt;/span&gt; &lt;span class="na"&gt;android:host=&lt;/span&gt;&lt;span class="s"&gt;"hogehoge-link"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class="c"&gt;&amp;lt;!-- リンクさせるパスを追記します --&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;data&lt;/span&gt; &lt;span class="na"&gt;android:pathPattern=&lt;/span&gt;&lt;span class="s"&gt;"/top"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;data&lt;/span&gt; &lt;span class="na"&gt;android:pathPattern=&lt;/span&gt;&lt;span class="s"&gt;"/setting"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次にディープリンクを制御するアクティビティを準備します&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.ComponentName&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.content.Intent&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.net.Uri&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.Bundle&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DeepLinkActivity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;companion&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;PATH_TOP&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/top"&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;PATH_SETTINGS&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"/setting"&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;intentFromDeepLink&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;
        &lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         取れるのはこんな情報&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         Intent { &lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;           act=android.intent.action.VIEW &lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;           dat=hogehoge-app://hogehoge-link/top&amp;amp;target_url=https://hogehoge.com/top&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         }&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;         **/&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;newIntent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ACTION_MAIN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;newIntent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addFlags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_ACTIVITY_NEW_TASK&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;originalUrl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;

        &lt;span class="c1"&gt;// facebookアプリからurl情報を受け取り&lt;/span&gt;
        &lt;span class="n"&gt;intentFromDeepLink&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;facebookIntent&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;facebookIntent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;
            &lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;             uriはこんな情報&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;             hogehoge-app://hogehoge-link/top&amp;amp;target_url=https%3A%2F%2Fhogehoge.com%2Ftop&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;             **/&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;facebookUrl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;getQueryParameter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"target_url"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;facebookUrl&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;originalUrl&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
                &lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;                 originalUrlはこんな情報&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;                 https://hogehoge.com/top&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt;                 **/&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// urlを元に起動する画面のintentを設定する&lt;/span&gt;
        &lt;span class="n"&gt;originalUrl&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;setIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;newIntent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nf"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newIntent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setIntent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;?,&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;setIntentToTop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;PATH_TOP&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;setIntentToTop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nc"&gt;PATH_SETTINGS&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;setIntentToSetting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;setIntentToTop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setIntentToTop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cls&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;TopActivity&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;
        &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ComponentName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addFlags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;setIntentToSetting&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cls&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SettingActivity&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;
        &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;component&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ComponentName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;packageName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addFlags&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_ACTIVITY_CLEAR_TOP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これでFacebookアプリからのディープリンクができるようになったと思います。&lt;br&gt;
iOSと同じようにOGP情報のキャッシュがあるので、サーバ側を更新したらOGPキャッシュのクリアは必須だと思っていいです。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="終わりに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%B5%82%E3%82%8F%E3%82%8A%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;終わりに&lt;/h1&gt;

&lt;p&gt;私一人では解決できなかったですが、ベテラン技術者の方に協力いただいてなんとか機能させることができました。大感謝です。&lt;br&gt;
Facebook公式に書いてある情報だけでは実現できないって…ちょっと不親切かな〜と思いました。&lt;br&gt;
他のアプリの中身はわからないので手探り状態でしたがとってもいい経験になったと思います。&lt;/p&gt;

&lt;p&gt;日本語の記事は見当たらなかったので誰かのお役に立てたらなと思います。&lt;/p&gt;
</content>
    <author>
      <name>190yamashita</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1255203</id>
    <published>2020-06-30T14:51:51+09:00</published>
    <updated>2020-07-01T23:02:43+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/K4N4/items/609415843343e6ac291a"/>
    <url>https://qiita.com/K4N4/items/609415843343e6ac291a</url>
    <title>【Kotlin】初心者向け: 画面回転やスリープ後のUIの保持</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;　今回は画面を回転させたときや本体をスリープさせた後、ビューの一部がその前後で変わってしまう問題について取り組みます。下の簡易的なボタンカウンターアプリでその様子が確認できます。縦画面でカウントアップさせたとき、横に切り替えると数字が0に戻ってしまうのです。&lt;br&gt;
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F658219%2F19f24c31-e98e-3f60-bf9f-5eec3f03dc25.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=8d009476b1d37a976446f7c2effa696f" target="_blank" rel="nofollow noopener"&gt;&lt;img width="211" alt="キャプチャ.PNG" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F658219%2F19f24c31-e98e-3f60-bf9f-5eec3f03dc25.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=8d009476b1d37a976446f7c2effa696f" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/658219/19f24c31-e98e-3f60-bf9f-5eec3f03dc25.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F658219%2F19f24c31-e98e-3f60-bf9f-5eec3f03dc25.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=a5c0137e349e3ad195d1ca145f255cef 1x" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F658219%2F7b7ab53f-fce7-e72f-ca82-c570b4b8eb90.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=a05a51c05e58679b011407cc7f05b70b" target="_blank" rel="nofollow noopener"&gt;&lt;img width="425" alt="キャプチャ2.PNG" src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F658219%2F7b7ab53f-fce7-e72f-ca82-c570b4b8eb90.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=a05a51c05e58679b011407cc7f05b70b" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/658219/7b7ab53f-fce7-e72f-ca82-c570b4b8eb90.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F658219%2F7b7ab53f-fce7-e72f-ca82-c570b4b8eb90.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=996058738639ff54ef222986218d9294 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="原因" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8E%9F%E5%9B%A0"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;原因&lt;/h1&gt;

&lt;p&gt;　この問題の原因は、画面の向きを変えるなどの諸動作によって、Activityがライフサイクルを一からやり直す事にあります。これによってハードウェアは、柔軟にかつ素早くユーザーのアクションを反映させることが出来ますが、同時にUIまでもが破棄されて初期化されてしまいます。これを防ぐためには、ライフサイクルが終わる前に、UI等の必要な情報を一時的に保持しておく必要があります。&lt;/p&gt;

&lt;p&gt;＊ライフサイクルについてはこちら：&lt;a href="https://qiita.com/K4N4/items/2f4babe2bab67ddacf89" class="autolink" id="reference-f04f9a44281728840ddd"&gt;https://qiita.com/K4N4/items/2f4babe2bab67ddacf89&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="onsaveinstancestate" class="fragment"&gt;&lt;/span&gt;&lt;a href="#onsaveinstancestate"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;onSaveInstanceState&lt;/h1&gt;

&lt;p&gt;一時的に情報を保持する方法の一つに、onSaveInstanceStateを利用するというものがあります。この方法はあまり大容量ではない情報を、簡単に保持する時に利用します。使い方は非常にシンプルです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)

        outState?.putInt("key", i)
    }

    override fun onRestoreInstanceState(savedInstanceState: Bundle) {
        super.onRestoreInstanceState(savedInstanceState)

        i = savedInstanceState?.getInt("key", 0)
        textView.text = i.toString()
    }
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　&lt;code&gt;onSaveInstanceState&lt;/code&gt;メソッド（データを保持する）と&lt;code&gt;onRestoreInstanceState&lt;/code&gt;メソッド（保持したデータを復元する）を呼び出し、&lt;code&gt;put〇〇&lt;/code&gt;と&lt;code&gt;get〇〇&lt;/code&gt;で実際にデータの受け渡しを行っています。&lt;br&gt;
　&lt;code&gt;onSaveInstanceState&lt;/code&gt;メソッドの&lt;code&gt;outState?.putInt("key", i)&lt;/code&gt;というのは&lt;code&gt;outState&lt;/code&gt;（データをメモリに保存する実体）に"key"（任意）というキーを使って、iというIntの値を保持する。という事を指しています。キーとはその名の通り鍵の事です。呼び出し側と共通のキーを持たなければ、データの受け渡しは出来ません。&lt;br&gt;
　&lt;code&gt;onRestoreInstanceState&lt;/code&gt;メソッドの&lt;code&gt;i =　savedInstanceState?.getInt("key", 0)&lt;/code&gt;は、Activityが破棄されて値が初期化されてしまった  i に、保持したデータの実態&lt;code&gt;savedInstanceState&lt;/code&gt;から&lt;code&gt;getInt&lt;/code&gt;メソッドで共通のキーを持つ値を取り出しています。&lt;code&gt;getInt&lt;/code&gt;の第二引数は、&lt;code&gt;putInt&lt;/code&gt;がnullの場合の値を設定します。&lt;br&gt;
　この二つのメソッドとその中身を入れるだけで、簡単に設定した値の保持が行えます。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="onsaveinstancestateとonrestoreinstancestateとライフサイクル" class="fragment"&gt;&lt;/span&gt;&lt;a href="#onsaveinstancestate%E3%81%A8onrestoreinstancestate%E3%81%A8%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;onSaveInstanceStateとonRestoreInstanceStateとライフサイクル&lt;/h1&gt;

&lt;p&gt;　先述したようにこの二つのメソッドを使えば、簡単にUIの保持を行えます。では、この二つのメソッドはActivityのライフサイクルにおいて、どの段階で機能してるのでしょうか？&lt;br&gt;
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F658219%2F4a69d6af-aa12-256b-a5fc-cc918ddde234.jpeg?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=0b64a307c3fe0244f8d715c2c0d7a233" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F658219%2F4a69d6af-aa12-256b-a5fc-cc918ddde234.jpeg?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=0b64a307c3fe0244f8d715c2c0d7a233" alt="android_jitsumu2_6.jpg" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/658219/4a69d6af-aa12-256b-a5fc-cc918ddde234.jpeg" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F658219%2F4a69d6af-aa12-256b-a5fc-cc918ddde234.jpeg?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=ecbd19dc584e83bdb246439c094ea824 1x" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
それを示すのがこの図です。この図はActivityの基本的な工程に、今回用いた二つのメソッド等を加えたものです。この図の通り、&lt;code&gt;onSaveInstanceState&lt;/code&gt;はonPauseの後に値の保持を、&lt;code&gt;onRestoreInstanceState&lt;/code&gt;は&lt;code&gt;onStart&lt;/code&gt;の後に値の復元を行っています。&lt;code&gt;onRestoreInstanceState&lt;/code&gt;の値は&lt;code&gt;onCreate&lt;/code&gt;に影響を及ぼさなかったり、&lt;code&gt;onSaveInstanceState&lt;/code&gt;が呼び出されたら必ずアプリが止まることなどが分かります。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="実際にこのライフサイクルを可視化してみる" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AE%9F%E9%9A%9B%E3%81%AB%E3%81%93%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%82%92%E5%8F%AF%E8%A6%96%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;実際にこのライフサイクルを可視化してみる&lt;/h1&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;class MainActivity : AppCompatActivity() {

    private var i : Int = 0

    override fun onCreate(savedInstanceState: Bundle?) {
        Log.d(TAG, "onStart: called")
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        button.setOnClickListener {
            i += 1
            textView.text = i.toString()
        }
    }

    override fun onStart() {
        Log.d(TAG, "onStart: called")
        super.onStart()
    }

    override fun onResume() {
        Log.d(TAG, "onResume: called")
        super.onResume()
    }

    override fun onPause() {
        Log.d(TAG, "onPause: called")
        super.onPause()
    }

    override fun onSaveInstanceState(outState: Bundle) {
        Log.d(TAG, "onSaveInstanceState: called")
        super.onSaveInstanceState(outState)

        outState.putInt("key", i)
    }

    override fun onRestoreInstanceState(savedInstanceState: Bundle) {
        Log.d(TAG, "onRestoreInstanceState: called")
        super.onRestoreInstanceState(savedInstanceState)

        i = savedInstanceState.getInt("key", 0)
        textView.text = i.toString()
    }

    override fun onStop() {
        Log.d(TAG, "onStop: called")
        super.onStop()
    }

    override fun onRestart() {
        Log.d(TAG, "onRestart: called")
        super.onRestart()
    }

    override fun onDestroy() {
        Log.d(TAG, "onDestroy: called")
        super.onDestroy()
    }
}
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;MainActivityの中身をこのようにすることで、実際にどこでデータの保持等が行われているかログを通して可視化することが出来ます。このソースコードでは、上で示したカウントアップ機能のためにデータのやり取りを行っています。上手くいけば、各工程ごとにログに出力がなされます。是非回転などさせて試してみてください。&lt;/p&gt;
</content>
    <author>
      <name>K4N4</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1255145</id>
    <published>2020-06-30T12:51:31+09:00</published>
    <updated>2020-06-30T12:51:31+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/vram/items/502bd89dc3009b160b83"/>
    <url>https://qiita.com/vram/items/502bd89dc3009b160b83</url>
    <title>KotlinでSDカードにアクセス</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;KotlinからSDカードにアクセスするときの処理を出来るだけ最新のAndroidでも動作するようにしてみました。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="準備" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%BA%96%E5%82%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;準備&lt;/h1&gt;

&lt;p&gt;build.gradle(app)にDocumentFileが使えるように1行追加します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="gradle"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;build.gradle&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// 省略&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s2"&gt;"androidx.documentfile:documentfile:1.0.1"&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
&lt;span id="パーミッションは使わない" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%91%E3%83%BC%E3%83%9F%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AF%E4%BD%BF%E3%82%8F%E3%81%AA%E3%81%84"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;パーミッションは使わない&lt;/h1&gt;

&lt;p&gt;パーミッションを使って権限を取得する方法は新しいバージョンだと使えません。&lt;br&gt;
SDカードに書き込む方法を最新の方法で書くと&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;sample.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;intent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ACTION_OPEN_DOCUMENT_TREE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;startActivityForResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;permissioRequestCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;たった2行です。&lt;br&gt;
これでユーザーにSDカードも含めて書き込む場所を問い合わせることが出来ます。&lt;/p&gt;

&lt;p&gt;ユーザーが決定すると&lt;strong&gt;onActivityResult&lt;/strong&gt;イベントが発生します。&lt;br&gt;
イベント内の data: Intent?は使うので大事に取っておきます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;sample.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getContentResolver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;takePersistableUriPermission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_GRANT_READ_URI_PERMISSION&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_GRANT_WRITE_URI_PERMISSION&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;picDir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;DocumentFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fromTreeUri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ユーザーが指定した場所をuriに、そしてそれを元にフォルダを取得します。&lt;br&gt;
ここではPCのクセが抜けずにそのままの用語を使っていますがいわゆるファイル名の代わりにURI、フォルダに関してはAndroid独特の表現があります。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="ファイル名を取得" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%82%92%E5%8F%96%E5%BE%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ファイル名を取得&lt;/h1&gt;

&lt;p&gt;作る側が指定するファイル名をFileNameで指定して&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;   FileUri = picDir?.createFile("text/plain", FileName)
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のようにするといよいよファイル名を示すものが得られます。&lt;br&gt;
ですがこのファイル名、毎回変わります。命令を和訳すると「新規ファイル名を取得」ですからそれもそうですね。2回目はファイル名の後ろに(2)とかつきます。&lt;/p&gt;

&lt;p&gt;なのでファイルが存在する場合はそれを使って、無い場合は作るようにします。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;sample.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nc"&gt;FileUri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;picDir&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;findFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;FileUri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;picDir&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;createFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"text/plain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
&lt;span id="ファイルの新規書き込み" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E6%96%B0%E8%A6%8F%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ファイルの新規書き込み&lt;/h1&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;sample.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;Stream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getContentResolver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;openOutputStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getUri&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DataStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toByteArray&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
&lt;span id="ファイルの追加書き込み" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%BF%BD%E5%8A%A0%E6%9B%B8%E3%81%8D%E8%BE%BC%E3%81%BF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ファイルの追加書き込み&lt;/h1&gt;

&lt;p&gt;別の命令か書き込み属性の指定があるかと思ったらまさかの文字列形式で指定でした。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;sample.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;Stream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getContentResolver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;openOutputStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getUri&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="s"&gt;"wa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DataStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toByteArray&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
&lt;span id="ファイル削除" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%89%8A%E9%99%A4"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ファイル削除&lt;/h1&gt;

&lt;p&gt;ファイル削除命令はこのようになりますが動きません。&lt;br&gt;
これはSDカード内のファイルを消すにはこれもユーザーの許可が必要だからです。&lt;br&gt;
問い合わせてまた&lt;strong&gt;onActivityResult&lt;/strong&gt;を使って許可されたことを確認します。&lt;br&gt;
面倒なのでサンプルは無しです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;sample.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getContentResolver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getUri&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
&lt;span id="注意点" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%B3%A8%E6%84%8F%E7%82%B9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;注意点&lt;/h1&gt;

&lt;p&gt;ユーザーが許可をすれば問題ありませんが許可しない場合に何度も問い合わせを行う事は推奨されていません。&lt;br&gt;
一度キャンセルされた後に各処理でさらに問い合わせが必要になった場合は処理が中断されることになるのでソースの書き方に工夫が必要です。&lt;br&gt;
キャンセルされた場合はもうあきらめるというのでも良いかもしれません。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="ソース" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%BD%E3%83%BC%E3%82%B9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ソース&lt;/h1&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;sd.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SdcardControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;permissioRequestCode&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;1001&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;picDir&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DocumentFile&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Uri&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;mFileName&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;FileUri&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;DocumentFile&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;FileName&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mFileName&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;mFileName&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picDir&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;FileUri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;picDir&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;findFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;FileUri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;picDir&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;createFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"text/plain"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;FileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;intent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ACTION_OPEN_DOCUMENT_TREE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;startActivityForResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;permissioRequestCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;resultUri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;?){&lt;/span&gt;
        &lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;getData&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getContentResolver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;takePersistableUriPermission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_GRANT_READ_URI_PERMISSION&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;FLAG_GRANT_WRITE_URI_PERMISSION&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;picDir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;DocumentFile&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fromTreeUri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;saveFileCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DataStr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;Stream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getContentResolver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;openOutputStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getUri&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DataStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toByteArray&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;saveFileAdd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DataStr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;Stream&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getContentResolver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;openOutputStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getUri&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="s"&gt;"wa"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nc"&gt;Stream&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;DataStr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toByteArray&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;fileExist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileName&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;saveFileDelete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileName&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getContentResolver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getUri&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;IOException&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;fileLength&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;projection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
            &lt;span class="nf"&gt;arrayOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MediaStore&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;MediaColumns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Cursor&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getContentResolver&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;FileUri&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;projection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;moveToFirst&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getLong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;close&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Any&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;実装方法&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;MainActivity.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;sdcard&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;SdcardControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;sdcard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onActivityResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resultCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onActivityResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resultCode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultCode&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;RESULT_CANCELED&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestCode&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;sdcard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permissioRequestCode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="n"&gt;sdcard&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;resultUri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
    <author>
      <name>vram</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1254831</id>
    <published>2020-06-29T21:11:10+09:00</published>
    <updated>2020-06-29T21:30:27+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/karass/items/bcb50607c0b9fc21f183"/>
    <url>https://qiita.com/karass/items/bcb50607c0b9fc21f183</url>
    <title>Splash画面を実装する方法</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;Splash画面とは、アプリ起動時に最初に表示される画面です。アプリを起動するのに少なからず時間がかかります。その間に差し込む画面です。&lt;br&gt;
&lt;a href="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/cdff8bce-32e9-13aa-14eb-42bae42c2d53.gif" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/cdff8bce-32e9-13aa-14eb-42bae42c2d53.gif" width="200" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/cdff8bce-32e9-13aa-14eb-42bae42c2d53.gif" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
Splash画面は、↑のGIFで写っているドロイド君の画面です。&lt;br&gt;
この画面を作成する方法は大きく分けて2つあります。&lt;br&gt;
1つ目は、Activityのテーマを変更する方法&lt;br&gt;
2つ目は、Splash画面ようにActivityを作成する方法です。&lt;br&gt;
今回はそれぞれの長所短所と実装方法についてまとめていきます。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="1つ目の方法" class="fragment"&gt;&lt;/span&gt;&lt;a href="#1%E3%81%A4%E7%9B%AE%E3%81%AE%E6%96%B9%E6%B3%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1つ目の方法&lt;/h1&gt;

&lt;p&gt;1つ目は、&lt;strong&gt;Activityのテーマを変更する方法&lt;/strong&gt;です。アプリは起動すると、デフォルトでは&lt;code&gt;windowBackground&lt;/code&gt;の画面が表示されるらしいです。このプレースホルダーをSplash画面に拡張します。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="実装" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AE%9F%E8%A3%85"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;実装&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;windowBackgroudcolor&lt;/code&gt;に、これから作成するSplash画面を設定します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;styles.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
    &lt;span class="nt"&gt;&amp;lt;style&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"AppTheme.Splash"&lt;/span&gt; &lt;span class="na"&gt;parent=&lt;/span&gt;&lt;span class="s"&gt;"Theme.AppCompat.DayNight.NoActionBar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;"android:windowBackground"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;@drawable/splash_drawable&lt;span class="nt"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;今回用意したSplash画面は、中心にドロイド君が配置された画面になります。それを実装すると、&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;splash_drawable.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;layer-list&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:drawable=&lt;/span&gt;&lt;span class="s"&gt;"@color/colorWhite"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt;
        &lt;span class="na"&gt;android:drawable=&lt;/span&gt;&lt;span class="s"&gt;"@drawable/ic_baseline_android_24"&lt;/span&gt;
        &lt;span class="na"&gt;android:gravity=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/layer-list&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;このようになります。真ん中に配置するドロイド君は、&lt;br&gt;
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F289190%2Fd969ebb5-9b77-eb16-0b78-18e1f868b2bb.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=b21b18513a219ea3cb9f8778ad49d4d1" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F289190%2Fd969ebb5-9b77-eb16-0b78-18e1f868b2bb.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=b21b18513a219ea3cb9f8778ad49d4d1" width="50%" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/d969ebb5-9b77-eb16-0b78-18e1f868b2bb.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F289190%2Fd969ebb5-9b77-eb16-0b78-18e1f868b2bb.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=7312fd32cdb7411d0fa069f1366f8649 1x" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
New -&amp;gt; VectorAssetから作成してください。&lt;/p&gt;

&lt;p&gt;起動時のテーマを&lt;code&gt;AppTheme&lt;/code&gt;から&lt;code&gt;Apptheme.Splash&lt;/code&gt;に変更します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;AndroidManifest.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;
            &lt;span class="na"&gt;android:theme=&lt;/span&gt;&lt;span class="s"&gt;"@style/AppTheme.Splash"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;アプリが起動する準備ができたら、MainActivityの&lt;code&gt;setContentView()&lt;/code&gt;で渡されたレイアウトが適応されます。その前にThemeを元の&lt;code&gt;AppTheme&lt;/code&gt;に変更しましょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;MainActivity.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setTheme&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;AppTheme&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;以上の実装でドロイド君が中心に配置してあるSplash画面を作成することができました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;長所&lt;/strong&gt;&lt;br&gt;
この実装方法では、アプリが起動する準備ができ次第、Splash画面から遷移するのでユーザーの時間を無駄にすることがありません。さらに、アプリがすでにメモリにある場合はあまり表示されることもないです。&lt;br&gt;
&lt;strong&gt;短所&lt;/strong&gt;&lt;br&gt;
短所？ではないかもしれませんが、この実装だとアニメーションのような画面を表示することができません。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="2つ目の方法" class="fragment"&gt;&lt;/span&gt;&lt;a href="#2%E3%81%A4%E7%9B%AE%E3%81%AE%E6%96%B9%E6%B3%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;2つ目の方法&lt;/h1&gt;

&lt;p&gt;2つ目は、&lt;strong&gt;Splash画面ようにActivityを作成する方法&lt;/strong&gt;です。この方法だと、1つ目の方法でできなかったアニメーションや複雑な画面を実装することができます。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="実装-1" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AE%9F%E8%A3%85-1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;実装&lt;/h2&gt;

&lt;p&gt;この方法では、様々なやり方があると思いますが今回はCoroutineを使って実装します。&lt;br&gt;
まず、Gradleに依存関係を記述します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="gradle"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;build.gradle&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//Coroutine&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s1"&gt;'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;新たに&lt;code&gt;SplashActivity&lt;/code&gt;というActivityを作成します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;SplashActivity.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SplashActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_splash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nc"&gt;CoroutineScope&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Dispatchers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;launch&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;intent&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Intent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="nd"&gt;@SplashActivity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;startActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;このActivityでは2秒のdelayの後、MainActivityに遷移するという実装をしてあります。Splash画面用にActivityを作成することにより、レイアウトにアニメーションを追加したり、様々なことができます。今回はプログレスバーを表示させるSplash画面を作成しました。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;activity_splash.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;androidx.appcompat.widget.AppCompatTextView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/splash"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"Slash"&lt;/span&gt;
        &lt;span class="na"&gt;android:textSize=&lt;/span&gt;&lt;span class="s"&gt;"40dp"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintBottom_toTopOf=&lt;/span&gt;&lt;span class="s"&gt;"@id/progressbar"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintTop_toTopOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;ProgressBar&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/progressbar"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintTop_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"@id/splash"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;AndroidManifestに、起動時のActivityをSplashActivityに指定してあげれば完了です。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;AndroidManifest.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;".SplashActivity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.intent.action.MAIN"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

                &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.intent.category.LAUNCHER"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/86dc7eae-510b-edf1-0d27-5b58661049f2.gif" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/86dc7eae-510b-edf1-0d27-5b58661049f2.gif" width="200" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/86dc7eae-510b-edf1-0d27-5b58661049f2.gif" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    <author>
      <name>karass</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1254614</id>
    <published>2020-06-29T14:07:01+09:00</published>
    <updated>2020-06-29T14:20:15+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/KIRIN3qiita/items/2cd7bd4bc7c12e59e223"/>
    <url>https://qiita.com/KIRIN3qiita/items/2cd7bd4bc7c12e59e223</url>
    <title>Realmの基本的な使い方まとめ in Kotlin</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="1概要" class="fragment"&gt;&lt;/span&gt;&lt;a href="#1%E6%A6%82%E8%A6%81"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.概要&lt;/h1&gt;

&lt;p&gt;RealmはSQLiteに代わる軽量、高速データベースでアプリ開発にも利用できます。&lt;br&gt;
そのRealmが7.0.0になりKotlinの正式ドキュメントも公開されました！&lt;br&gt;
せっかくなのでAndroidアプリでの簡単な使い方をまとめます。&lt;br&gt;
7.0.0はbeta版で、安定板は6.0.２になります。お好みでどうぞ！&lt;/p&gt;

&lt;p&gt;■URL&lt;br&gt;
【公式】Kotlinドキュメント&lt;br&gt;
&lt;a href="https://realm.io/docs/kotlin/latest/" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://realm.io/docs/kotlin/latest/&lt;/a&gt;&lt;br&gt;
【公式】Javaドキュメント&lt;br&gt;
&lt;a href="https://realm.io/docs/java/latest/" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://realm.io/docs/java/latest/&lt;/a&gt;&lt;br&gt;
自作サンプル（INSERT,SELECT,DELETEしているだけ）&lt;br&gt;
&lt;a href="https://github.com/KIRIN3git/RealmTest" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/KIRIN3git/RealmTest&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="2事前準備" class="fragment"&gt;&lt;/span&gt;&lt;a href="#2%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;2.事前準備&lt;/h1&gt;

&lt;p&gt;build.gradleは7.0.0と6.0.2で設定が違います。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;build.gradle【7.0.0】&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;buildscript {
    repositories {
        jcenter()
        google()
        maven {
            url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
        }
    }
    dependencies {
        classpath "io.realm:realm-gradle-plugin:7.0.0-beta-SNAPSHOT"
    }
}

allprojects {
    repositories {
        jcenter()
        google()
        maven {
            url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
        }
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="text"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;build.gradle【6.0.2】&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.realm:realm-gradle-plugin:6.0.2"
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="gradle"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;[app]build.gradle&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'com.android.application'&lt;/span&gt;
&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'kotlin-kapt'&lt;/span&gt;
&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'kotlin-android'&lt;/span&gt;
&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'kotlin-android-extensions'&lt;/span&gt;
&lt;span class="n"&gt;apply&lt;/span&gt; &lt;span class="nl"&gt;plugin:&lt;/span&gt; &lt;span class="s1"&gt;'realm-android'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;font color="red"&gt;（注意）kotlinプラグインの後にrealm-androidでないとダメ&lt;/font&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="3-初期化と設定" class="fragment"&gt;&lt;/span&gt;&lt;a href="#3-%E5%88%9D%E6%9C%9F%E5%8C%96%E3%81%A8%E8%A8%AD%E5%AE%9A"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;3. 初期化と設定&lt;/h1&gt;

&lt;p&gt;初期化と設定を行います。&lt;br&gt;
初期化の場所はどこでもOKですが、最初に呼び出せば良いのでApplicationクラスがオススメだそうです。&lt;/p&gt;

&lt;p&gt;設定はDBを分けたり、拡張したり、永続化せずインメモリにしたり、リードオンリーにしたりするのに利用するそうです。&lt;br&gt;
設定しなくても動きます。&lt;br&gt;
・参考&lt;br&gt;
&lt;a href="https://realm.io/docs/java/latest/api/io/realm/RealmConfiguration.html" rel="nofollow noopener" target="_blank"&gt;RealmConfiguration&lt;/a&gt;&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;MainApplication.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainApplication&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="c1"&gt;// 初期化&lt;/span&gt;
        &lt;span class="nc"&gt;Realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// 設定&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;config&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;RealmConfiguration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"myrealm.realm"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;encryptionKey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getMyKey&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;schemaVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MySchemaModule&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;migration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MyMigration&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;readOnly&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;inMemory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="nc"&gt;Realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setDefaultConfiguration&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
&lt;span id="４-モデルクラスの作り方" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%EF%BC%94-%E3%83%A2%E3%83%87%E3%83%AB%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;４. モデルクラスの作り方&lt;/h1&gt;

&lt;p&gt;データをinsertしたりselectするためのデータの型を作成&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;手順

&lt;ul&gt;
&lt;li&gt; RealmObjectを継承&lt;font color="red"&gt;（必須）&lt;/font&gt;
&lt;/li&gt;
&lt;li&gt; openに設定&lt;font color="red"&gt;（必須）&lt;/font&gt;
&lt;/li&gt;
&lt;li&gt; 必要に応じてアノテーションを設定

&lt;ul&gt;
&lt;li&gt;
&lt;a href="/PrimaryKey" class="user-mention js-hovercard" title="PrimaryKey" data-hovercard-target-type="user" data-hovercard-target-name="PrimaryKey"&gt;@PrimaryKey&lt;/a&gt; プライマリーキー&lt;/li&gt;
&lt;li&gt;
&lt;a href="/Index" class="user-mention js-hovercard" title="Index" data-hovercard-target-type="user" data-hovercard-target-name="Index"&gt;@Index&lt;/a&gt; インデックス&lt;/li&gt;
&lt;li&gt;
&lt;a href="/Ignore" class="user-mention js-hovercard" title="Ignore" data-hovercard-target-type="user" data-hovercard-target-name="Ignore"&gt;@Ignore&lt;/a&gt; 保存したくない項目&lt;/li&gt;
&lt;li&gt;
&lt;a href="/Required" class="user-mention js-hovercard" title="Required" data-hovercard-target-type="user" data-hovercard-target-name="Required"&gt;@Required&lt;/a&gt; 必須項目&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プライマリーキー​を設定するとcopyToRealmOrUpdateまたはinsertOrUpdateを使用できます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;Person.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;open&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="nd"&gt;@PrimaryKey&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Long&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;age&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;RealmObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
&lt;span id="5-登録方法insert" class="fragment"&gt;&lt;/span&gt;&lt;a href="#5-%E7%99%BB%E9%8C%B2%E6%96%B9%E6%B3%95insert"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;5. 登録方法(INSERT)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;手順

&lt;ul&gt;
&lt;li&gt; インスタンスを作成&lt;/li&gt;
&lt;li&gt; トランザクションでラップ&lt;/li&gt;
&lt;li&gt; insert&lt;/li&gt;
&lt;li&gt; インスタンスを閉じる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;インスタンスはアクティビティ内などで使いまわしても良いです。&lt;br&gt;
そしてインスタンスは必ず閉じましょう！&lt;br&gt;
トランザクションの方法は色々あります。&lt;br&gt;
非同期で使いたい場合は&lt;a href="https://realm.io/docs/kotlin/latest/#asynchronous-transactions" rel="nofollow noopener" target="_blank"&gt;executeTransactionAsync&lt;/a&gt;&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;RealmSql.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// インスタンス作成&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;realm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefaultInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;personData&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="nc"&gt;Taro&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;beginTransaction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;personData&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;commitTransaction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// インスタンスを閉じる&lt;/span&gt;
&lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
&lt;span id="6-取得方法select" class="fragment"&gt;&lt;/span&gt;&lt;a href="#6-%E5%8F%96%E5%BE%97%E6%96%B9%E6%B3%95select"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;6. 取得方法(SELECT)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;手順&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;インスタンスを作成&lt;/li&gt;
&lt;li&gt;データの取得&lt;/li&gt;
&lt;li&gt;絞り込み&lt;/li&gt;
&lt;li&gt;メモリ外にコピー&lt;/li&gt;
&lt;li&gt;インスタンスを閉じる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;主な取得関数&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;findAll：クエリ条件を満たすすべてのオブジェクトを検索します&lt;/li&gt;
&lt;li&gt;findAllAsync：バックグラウンドスレッドで非同期に動作します&lt;/li&gt;
&lt;li&gt;findFirst（またはfindFirstAsync）：クエリ条件を満たす最初のオブジェクトを見つける&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;その他関数はこちら(Javaだけど・・・)&lt;br&gt;
&lt;a href="https://realm.io/docs/java/3.5.0/api/io/realm/RealmQuery.html" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://realm.io/docs/java/3.5.0/api/io/realm/RealmQuery.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;利用方法はこちらを参照&lt;br&gt;
&lt;a href="https://realm.io/docs/kotlin/latest/#queries" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://realm.io/docs/kotlin/latest/#queries&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;RxJavaも利用できる！（試してはいない・・・）&lt;br&gt;
&lt;a href="https://realm.io/docs/kotlin/latest/#rxjava" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://realm.io/docs/kotlin/latest/#rxjava&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;font color="red"&gt;（注意） realmオブジェクトはRealmインスタンスをクローズすると消えてしまう。kotlinオブジェクトとして使いたい場合はcopyFromRealmを使用！&lt;/font&gt;&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;RealmSql.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// インスタンス作成&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;realm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefaultInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// 全取得&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;users&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;().&lt;/span&gt;&lt;span class="nf"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// 絞り込み&lt;/span&gt;
&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;equalTo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"John”)
&lt;/span&gt;&lt;span class="c1"&gt;// メモリ外にコピー&lt;/span&gt;
&lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;user&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;copyFromRealm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;users&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;// インスタンスを閉じる&lt;/span&gt;
&lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
&lt;span id="7-削除方法delete" class="fragment"&gt;&lt;/span&gt;&lt;a href="#7-%E5%89%8A%E9%99%A4%E6%96%B9%E6%B3%95delete"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;7. 削除方法(DELETE)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;手順

&lt;ul&gt;
&lt;li&gt; インスタンスを作成&lt;/li&gt;
&lt;li&gt; トランザクションでラップ&lt;/li&gt;
&lt;li&gt; delete&lt;/li&gt;
&lt;li&gt; インスタンスを閉じる&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;RealmSql.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// インスタンス作成&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;realm&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getDefaultInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;beginTransaction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;// 削除&lt;/span&gt;
&lt;span class="n"&gt;persons&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deleteAllFromRealm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;commitTransaction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;// インスタンスを閉じる&lt;/span&gt;
&lt;span class="n"&gt;realm&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
    <author>
      <name>KIRIN3qiita</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1254590</id>
    <published>2020-06-29T13:08:13+09:00</published>
    <updated>2020-06-30T10:13:41+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/vram/items/46bbc5cb027714b41638"/>
    <url>https://qiita.com/vram/items/46bbc5cb027714b41638</url>
    <title>KotlinでTCP/IP送信</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;AndroidでTCP/IP通信をしようとするとうまくいかないので、その対応方法の記録です。&lt;br&gt;
2018年ごろに作られているTCP/IPのサンプルがまったく動作しないのでその原因を調査しました。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="サンプル1" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;サンプル1&lt;/h1&gt;

&lt;p&gt;MainActivityのボタンクリックイベント内に&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;sample1.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;socket&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;socket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;writer&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;PrintWriter&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PrintWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getOutputStream&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"serial test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;と代表的なサンプルを書いて動作させてみましょう。&lt;br&gt;
&lt;strong&gt;コメントの方にすばらしく簡潔なサンプルがありますのでそちらも参考にして下さい。&lt;/strong&gt;&lt;br&gt;
これは動作しません。動作しないと言うより接続に行きません。&lt;br&gt;
エラー内容を見ると&lt;strong&gt;パーミッション&lt;/strong&gt;を指定して下さいと表示されるのでAndroidManifest.xmlを修正します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;AndroidManifest.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nt"&gt;&amp;lt;application&lt;/span&gt;
        &lt;span class="err"&gt;中略&lt;/span&gt;
        &lt;span class="na"&gt;android:usesCleartextTraffic=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;
        &lt;span class="err"&gt;中略&lt;/span&gt;
    &lt;span class="err"&gt;&amp;lt;/application&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.permission.INTERNET"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.permission.ACCESS_NETWORK_STATE"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;INTERNETの指定がインターネットへ接続可能にする設定&lt;br&gt;
ACCESS_NETWORK_STATEはネットワークの様々なやりとりを有効にする設定&lt;br&gt;
android:usesCleartextTraffic="true"は暗号化無しの通信を許可する設定です。&lt;/p&gt;

&lt;p&gt;INTERNET以外の設定は不要と思いますが今後のバージョンアップでまた悩むのが嫌なのであらかじめ付けてます。&lt;/p&gt;

&lt;p&gt;そして実行すると今度はアプリが落ちます。&lt;br&gt;
エラーメッセージに若干のヒントはあるのですが要は「ボタンクリックイベントから呼ぶな」と言っているようです。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="サンプル2" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB2"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;サンプル2&lt;/h1&gt;

&lt;p&gt;じゃあ簡単なスレッドを作ってその中で動作させてみます。&lt;br&gt;
&lt;strong&gt;コメントの方にすばらしく簡潔なサンプルがありますのでそちらも参考にして下さい。&lt;/strong&gt;&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;sample.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;runnable&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;Runnable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;socket&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;
                &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"localhost"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;12345&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;writer&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;PrintWriter&lt;/span&gt;  &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;PrintWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getOutputStream&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"serial test"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;thread&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;runnable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;thread&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;今度は動作します。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="まとめ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%BE%E3%81%A8%E3%82%81"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;まとめ&lt;/h1&gt;

&lt;p&gt;元々接続処理を行うと指定しても一定時間処理が返ってこないのでメインで処理する物ではありませんが、だからといってアプリごと落とさなくても・・・&lt;/p&gt;
</content>
    <author>
      <name>vram</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1254335</id>
    <published>2020-06-29T00:02:57+09:00</published>
    <updated>2020-06-29T00:02:57+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/karass/items/0d4ae10ce74855eac2cb"/>
    <url>https://qiita.com/karass/items/0d4ae10ce74855eac2cb</url>
    <title>Dagger Hilt触ってみた</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;巷で噂のDagger Hiltをようやく触ってみました。&lt;a href="https://codelabs.developers.google.com/codelabs/android-dagger-to-hilt/#0" rel="nofollow noopener" target="_blank"&gt;Codelab&lt;/a&gt;を一通り終わったので、実際に&lt;a href="https://qiita.com/karass/items/883353b80ac84becf44c" id="reference-eae0338ac355d0af308d"&gt;過去の記事&lt;/a&gt;でDaggerを使ってDIしたのですがそれをHiltに移行した手順をまとめます。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="gradle" class="fragment"&gt;&lt;/span&gt;&lt;a href="#gradle"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Gradle&lt;/h1&gt;

&lt;div class="code-frame" data-lang="gradle"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;build.gradle&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;// build.gradle (Project)&lt;/span&gt;
    &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hilt_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'2.28-alpha'&lt;/span&gt;
    &lt;span class="k"&gt;dependencies&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;classpath&lt;/span&gt; &lt;span class="s2"&gt;"com.google.dagger:hilt-android-gradle-plugin:$hilt_version"&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="gradle"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;build.gradle&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="c1"&gt;// build.gradle (App)&lt;/span&gt;
    &lt;span class="c1"&gt;// Dagger_hilt&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s2"&gt;"com.google.dagger:hilt-android:$hilt_version"&lt;/span&gt; &lt;span class="c1"&gt;// 必須&lt;/span&gt;
    &lt;span class="n"&gt;kapt&lt;/span&gt; &lt;span class="s2"&gt;"com.google.dagger:hilt-android-compiler:$hilt_version"&lt;/span&gt; &lt;span class="c1"&gt;// 必須&lt;/span&gt;

    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;dagger_hilt_view_model_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"1.0.0-alpha01"&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s2"&gt;"androidx.hilt:hilt-lifecycle-viewmodel:${dagger_hilt_view_model_version}"&lt;/span&gt;
    &lt;span class="n"&gt;kapt&lt;/span&gt; &lt;span class="s2"&gt;"androidx.hilt:hilt-compiler:${dagger_hilt_view_model_version}"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;今回は、ViewModelを使うので、&lt;code&gt;hilt-compiler&lt;/code&gt;と&lt;code&gt;hilt-lifecycle-viewmodel&lt;/code&gt;を追加した。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="実装" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AE%9F%E8%A3%85"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;実装&lt;/h1&gt;

&lt;p&gt;移行の順番は、&lt;br&gt;
1. Application &amp;amp; &lt;a href="/Singleton" class="user-mention js-hovercard" title="Singleton" data-hovercard-target-type="user" data-hovercard-target-name="Singleton"&gt;@Singleton&lt;/a&gt;&lt;br&gt;
2. Fragment &amp;amp; Activity&lt;/p&gt;

&lt;p&gt;ということで、Applicationを見てみましょう。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="application" class="fragment"&gt;&lt;/span&gt;&lt;a href="#application"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Application&lt;/h2&gt;

&lt;p&gt;Hiltに移行する前のコードがこちらです。&lt;code&gt;Application&lt;/code&gt;では、独自に設計した&lt;code&gt;Component&lt;/code&gt;をインスタンス化していました。しかし、Hiltでは標準のComponentが用意されていてComponentを定義する必要がなくなったらしい。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;TodoApplication.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoApplication&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;companion&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;lateinit&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;component&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppComponent&lt;/span&gt; &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;component&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;DaggerAppComponent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;applicationContext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Hiltでは&lt;code&gt;Application&lt;/code&gt;を&lt;code&gt;@HiltAndroidApp&lt;/code&gt;アノテーションをつけて定義します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;TodoApplication.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@HiltAndroidApp&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TodoApplication&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Application&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;//    companion object {&lt;/span&gt;
&lt;span class="c1"&gt;//        lateinit var component: AppComponent private set&lt;/span&gt;
&lt;span class="c1"&gt;//    }&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//    override fun onCreate() {&lt;/span&gt;
&lt;span class="c1"&gt;//        super.onCreate()&lt;/span&gt;
&lt;span class="c1"&gt;//        component = DaggerAppComponent.factory().create(applicationContext)&lt;/span&gt;
&lt;span class="c1"&gt;//    }&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;このコードからわかるように&lt;code&gt;Component&lt;/code&gt;自体もいらないので、&lt;code&gt;AppComponent&lt;/code&gt;を削除します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;AppComponent.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//@Singleton&lt;/span&gt;
&lt;span class="c1"&gt;//@Component(&lt;/span&gt;
&lt;span class="c1"&gt;//    modules = [&lt;/span&gt;
&lt;span class="c1"&gt;//        DatabaseModule::class&lt;/span&gt;
&lt;span class="c1"&gt;//    ]&lt;/span&gt;
&lt;span class="c1"&gt;//)&lt;/span&gt;
&lt;span class="c1"&gt;//interface AppComponent {&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;//    @Component.Factory&lt;/span&gt;
&lt;span class="c1"&gt;//    interface Factory {&lt;/span&gt;
&lt;span class="c1"&gt;//        fun create(@BindsInstance context: Context): AppComponent&lt;/span&gt;
&lt;span class="c1"&gt;//    }&lt;/span&gt;
&lt;span class="c1"&gt;//    fun mainViewModel(): MainViewModel&lt;/span&gt;
&lt;span class="c1"&gt;//}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
&lt;span id="activity" class="fragment"&gt;&lt;/span&gt;&lt;a href="#activity"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Activity&lt;/h2&gt;

&lt;p&gt;元々あった&lt;code&gt;Component&lt;/code&gt;を削除したので、ActivityやFragmentにInjectできるように、&lt;code&gt;@AndroidEntryPoint&lt;/code&gt;アノテーションを記述しなければならない。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;MainActivity.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@AndroidEntryPoint&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;今回は、Fragmentが登場しませんが、もしFragmentにInjectしたいときはそれを所持するActivityにも&lt;code&gt;@AndroidEntryPoint&lt;/code&gt;を付ける必要があります。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="module" class="fragment"&gt;&lt;/span&gt;&lt;a href="#module"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Module&lt;/h2&gt;

&lt;p&gt;Moduleの定義方法は、&lt;code&gt;@InstallIn(ApplicationComponent::class)&lt;/code&gt;アノテーションをつける必要があります。&lt;code&gt;@InstallIn&lt;/code&gt;アノテーションでHiltが生成するComponentにModuleを紐付けます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;DatabaseModule.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nd"&gt;@InstallIn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ApplicationComponent&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@Module&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DatabaseModule&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;


    &lt;span class="nd"&gt;@Singleton&lt;/span&gt;
    &lt;span class="nd"&gt;@Provides&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;provideTodoDatabase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;@ApplicationContext&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Context&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt;
        &lt;span class="nc"&gt;Room&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;databaseBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nc"&gt;TodoDatabase&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;"database_name"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="nd"&gt;@Singleton&lt;/span&gt;
    &lt;span class="nd"&gt;@Provides&lt;/span&gt;
    &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;provideTodoDao&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;todoDatabase&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TodoDatabase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;todoDatabase&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;todoDao&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;移行前は、&lt;code&gt;Context&lt;/code&gt;をComponentのインスタンス生成する時に渡していたがそれをする必要がなくなりました。 すでにBinding済みのContextを使用することができます。&lt;code&gt;@ApplicationContext&lt;/code&gt;か&lt;code&gt;@ActivityContext&lt;/code&gt;をつけるだけで使用できます。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="viewmodel" class="fragment"&gt;&lt;/span&gt;&lt;a href="#viewmodel"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ViewModel&lt;/h2&gt;

&lt;p&gt;ViewModelをHiltを使ってDIする場合、constructorに&lt;code&gt;@ViewModelInject&lt;/code&gt;アノテーションをつけます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;MainViewModel.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainViewModel&lt;/span&gt; &lt;span class="nd"&gt;@ViewModelInject&lt;/span&gt; &lt;span class="k"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;TodoRepository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ViewModel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;最後Activityに、&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;MainActivity.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mainViewModel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;MainViewModel&lt;/span&gt; &lt;span class="k"&gt;by&lt;/span&gt; &lt;span class="nf"&gt;viewModels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;を記述すれば移行完了です。&lt;/p&gt;
</content>
    <author>
      <name>karass</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1254121</id>
    <published>2020-06-28T19:25:29+09:00</published>
    <updated>2020-06-28T19:27:33+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/karass/items/b5290512ece473a82b3a"/>
    <url>https://qiita.com/karass/items/b5290512ece473a82b3a</url>
    <title>リップルカラーの変更方法</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;Buttonのリップルカラーを変更したいと思ったが、思い通りの色に変更することができなかった。 ここではButton（Material）のリップルカラーの変更方法の手順をまとめます。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="目標" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%9B%AE%E6%A8%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;目標&lt;/h1&gt;

&lt;p&gt;以下のようなOutlineButtonを作成します。&lt;br&gt;
&lt;a href="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/9d1da62f-761a-054f-d5e5-d7db59fb0b94.gif" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/9d1da62f-761a-054f-d5e5-d7db59fb0b94.gif" width="200" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/9d1da62f-761a-054f-d5e5-d7db59fb0b94.gif" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
&lt;span id="layout" class="fragment"&gt;&lt;/span&gt;&lt;a href="#layout"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Layout&lt;/h2&gt;

&lt;div class="code-frame" data-lang="xml"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;androidx.constraintlayout.widget.ConstraintLayout&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;com.google.android.material.button.MaterialButton&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/button"&lt;/span&gt;
        &lt;span class="na"&gt;style=&lt;/span&gt;&lt;span class="s"&gt;"@style/Widget.MaterialComponents.Button.OutlinedButton"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="na"&gt;android:text=&lt;/span&gt;&lt;span class="s"&gt;"Button"&lt;/span&gt;
        &lt;span class="na"&gt;android:theme=&lt;/span&gt;&lt;span class="s"&gt;"@style/Theme.MaterialComponents"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintBottom_toBottomOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintEnd_toEndOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintStart_toStartOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_constraintTop_toTopOf=&lt;/span&gt;&lt;span class="s"&gt;"parent"&lt;/span&gt;
        &lt;span class="na"&gt;app:strokeColor=&lt;/span&gt;&lt;span class="s"&gt;"?attr/colorPrimary"&lt;/span&gt;
        &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/androidx.constraintlayout.widget.ConstraintLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;リップルカラーをいじっていないボタンを生成します。 この状態だとリップルカラーは&lt;code&gt;colorPrimary&lt;/code&gt;になっているのと思います。&lt;br&gt;
&lt;a href="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/b3d9a838-69ee-a3be-22e7-f849eae6a2bb.gif" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/b3d9a838-69ee-a3be-22e7-f849eae6a2bb.gif" width="200" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/b3d9a838-69ee-a3be-22e7-f849eae6a2bb.gif" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
今回は黒のリップルカラーにしたいので、&lt;code&gt;rippleColor&lt;/code&gt;というアトリビュートを変えればいいのか！と思って黒に変更してみたが。。。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;activity_main.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
&lt;span class="nt"&gt;&amp;lt;com.google.android.material.button.MaterialButton&lt;/span&gt;
 &lt;span class="err"&gt;...&lt;/span&gt;
 &lt;span class="na"&gt;app:rippleColor=&lt;/span&gt;&lt;span class="s"&gt;"@color/colorBlack"&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/0c02d57f-eb5c-329e-0709-172fc99a7623.gif" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/0c02d57f-eb5c-329e-0709-172fc99a7623.gif" width="200" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/289190/0c02d57f-eb5c-329e-0709-172fc99a7623.gif" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
あれ、なんか濃くね？&lt;br&gt;
ここで、デフォルトのボタンがどのようになっているか&lt;code&gt;xml&lt;/code&gt;をたどってみました。&lt;br&gt;
&lt;code&gt;&amp;lt;item name="rippleColor"&amp;gt;@color/mtrl_btn_text_btn_ripple_color&amp;lt;/item&amp;gt;&lt;/code&gt;この&lt;code&gt;mtrl_btn_text_btn_ripple_color&lt;/code&gt;を見てみると、&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;mtrl_btn_text_btn_ripple_color.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;selector&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"@dimen/mtrl_low_ripple_pressed_alpha"&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;"?attr/colorPrimary"&lt;/span&gt; &lt;span class="na"&gt;android:state_pressed=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"@dimen/mtrl_low_ripple_focused_alpha"&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;"?attr/colorPrimary"&lt;/span&gt; &lt;span class="na"&gt;android:state_focused=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;android:state_hovered=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"@dimen/mtrl_low_ripple_focused_alpha"&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;"?attr/colorPrimary"&lt;/span&gt; &lt;span class="na"&gt;android:state_focused=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"@dimen/mtrl_low_ripple_hovered_alpha"&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;"?attr/colorPrimary"&lt;/span&gt; &lt;span class="na"&gt;android:state_hovered=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"@dimen/mtrl_low_ripple_default_alpha"&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;"?attr/colorPrimary"&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/selector&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ここで&lt;code&gt;alpha(不透明度)&lt;/code&gt;を設定していた。なので、この&lt;code&gt;?attr/colorPrimary&lt;/code&gt;を自分のしたい色に変更してやれば良さそう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;btn_ripple_color.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;selector&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"@dimen/ripple_pressed_alpha"&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;"@color/black"&lt;/span&gt; &lt;span class="na"&gt;android:state_pressed=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"@dimen/ripple_focused_alpha"&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;"@color/black"&lt;/span&gt; &lt;span class="na"&gt;android:state_focused=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="na"&gt;android:state_hovered=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"@dimen/ripple_focused_alpha"&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;"@color/black"&lt;/span&gt; &lt;span class="na"&gt;android:state_focused=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"@dimen/ripple_hovered_alpha"&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;"@color/black"&lt;/span&gt; &lt;span class="na"&gt;android:state_hovered=&lt;/span&gt;&lt;span class="s"&gt;"true"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;item&lt;/span&gt; &lt;span class="na"&gt;android:alpha=&lt;/span&gt;&lt;span class="s"&gt;"@dimen/ripple_default_alpha"&lt;/span&gt; &lt;span class="na"&gt;android:color=&lt;/span&gt;&lt;span class="s"&gt;"@color/black"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/selector&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;pressedやfocusedは、ボタンを押した時やフォーカス時の色は設定できます。（正直ボタンをfocuseやhoverってあんまり実感わかない）&lt;br&gt;
作成したxmlファイルを、&lt;code&gt;rippleColor&lt;/code&gt;に適応させる。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;activity_main.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...
&lt;span class="nt"&gt;&amp;lt;com.google.android.material.button.MaterialButton&lt;/span&gt;
 &lt;span class="err"&gt;...&lt;/span&gt;
 &lt;span class="na"&gt;app:rippleColor=&lt;/span&gt;&lt;span class="s"&gt;"@drawable/btn_ripple_color"&lt;/span&gt;
&lt;span class="err"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;以上でリップルカラーを変更できました！&lt;/p&gt;
</content>
    <author>
      <name>karass</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1253988</id>
    <published>2020-06-28T15:15:45+09:00</published>
    <updated>2020-06-28T15:15:45+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/nk5jp/items/841096efa0903cb72d58"/>
    <url>https://qiita.com/nk5jp/items/841096efa0903cb72d58</url>
    <title>push通知をトリガとしてAndroidに処理を実行させる</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="記事の趣旨" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%A8%98%E4%BA%8B%E3%81%AE%E8%B6%A3%E6%97%A8"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;記事の趣旨&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://qiita.com/nk5jp/items/6b2d3a678911457c2493" id="reference-170e760de6b18aac29e9"&gt;前の記事&lt;/a&gt;でサーバからAndroidにpush通知できることを確認したので，最後にそれをトリガとして，Android側で処理を走らせる方法を確認する．&lt;/p&gt;

&lt;h2&gt;
&lt;span id="1-android側の処理方法" class="fragment"&gt;&lt;/span&gt;&lt;a href="#1-android%E5%81%B4%E3%81%AE%E5%87%A6%E7%90%86%E6%96%B9%E6%B3%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1. Android側の処理方法&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://firebase.google.com/docs/cloud-messaging/android/receive?hl=ja" rel="nofollow noopener" target="_blank"&gt;こちら&lt;/a&gt;にまとめられているとおり，アプリがフォアグラウンドに存在する場合と，バックグラウンドに存在する場合とで，扱いが微妙に変わる．それぞれ以下に示す．&lt;/p&gt;

&lt;h3&gt;
&lt;span id="11-フォアグラウンドにいる場合firebasemessagingservice" class="fragment"&gt;&lt;/span&gt;&lt;a href="#11-%E3%83%95%E3%82%A9%E3%82%A2%E3%82%B0%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%89%E3%81%AB%E3%81%84%E3%82%8B%E5%A0%B4%E5%90%88firebasemessagingservice"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.1 フォアグラウンドにいる場合：FirebaseMessagingService&lt;/h3&gt;

&lt;p&gt;アプリがフォアグラウンドにいる場合，&lt;code&gt;com.google.firebase.messaging.FirebaseMessagingService&lt;/code&gt;パッケージの&lt;code&gt;FirebaseMessagingService&lt;/code&gt;クラスを拡張することでメッセージを受信できる．&lt;a href="https://qiita.com/nk5jp/items/7b7c1e70bde457041bd3" id="reference-9cf44d7bfbcc6fd978ac"&gt;2つ前の記事&lt;/a&gt;で言うところの&lt;code&gt;MyFirebaseMessagingService.kt&lt;/code&gt;がそれに該当する．以下ではこれをイジっていうことになる．&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FirebaseMessagingService&lt;/code&gt;クラスの仕様は&lt;a href="https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService?hl=ja" rel="nofollow noopener" target="_blank"&gt;こちら&lt;/a&gt;にリファレンスはまとめられている．いくつかのコールバックメソッドが用意されており，拡張クラスではこれらをoverrideしていくことになる．&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;onDeletedMessages()&lt;/code&gt;：端末が長時間サーバにアクセスしないなど，何かしらの理由でメッセージが長期間放置された結果としてメッセージが削除されたとき．&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onDestroy()&lt;/code&gt;：何も書いてないので不明．おそらくアプリをキルするときに走る．&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onMessageReceived(RemoteMessage message)&lt;/code&gt;：メッセージを受信したとき．&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onMessageSent(String msgId)&lt;/code&gt;：GCMのconnection serverへのメッセージ送信が成功したとき．&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onNewToken(String token)&lt;/code&gt;：新しいトークンが生成されたとき．&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;onSendError(String msgId, Exception exception)&lt;/code&gt;：GCMのconnection serverへのメッセージ送信が失敗したとき．&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
&lt;span id="12-バックグラウンドにいる場合intentの拡張部分" class="fragment"&gt;&lt;/span&gt;&lt;a href="#12-%E3%83%90%E3%83%83%E3%82%AF%E3%82%B0%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%89%E3%81%AB%E3%81%84%E3%82%8B%E5%A0%B4%E5%90%88intent%E3%81%AE%E6%8B%A1%E5%BC%B5%E9%83%A8%E5%88%86"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.2 バックグラウンドにいる場合：Intentの拡張部分&lt;/h3&gt;

&lt;p&gt;アプリがバックグラウンドにいる場合，&lt;code&gt;通知はデバイスのシステムトレイに配信され、データ ペイロードはランチャー アクティビティのインテントの追加部分に配信されます。&lt;/code&gt;と書いてある．色々確認したところ&lt;code&gt;intent.getExtras()&lt;/code&gt;から取り出せば良い模様．&lt;/p&gt;

&lt;h3&gt;
&lt;span id="13-実装例" class="fragment"&gt;&lt;/span&gt;&lt;a href="#13-%E5%AE%9F%E8%A3%85%E4%BE%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.3 実装例&lt;/h3&gt;

&lt;p&gt;サーバから送信されるメッセージは&lt;a href="https://qiita.com/nk5jp/items/6b2d3a678911457c2493"&gt;前の記事&lt;/a&gt;とほぼ同様．ただしdata部のみ以下のように修正．&lt;/p&gt;

&lt;div class="code-frame" data-lang="python"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'date'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'20200628'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;'message'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'これはテストメッセージです'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;クライアント側のうち&lt;code&gt;MyFirebaseMessagingService.kt&lt;/code&gt;はこんな感じ．&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyFirebaseMessagingService&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;FirebaseMessagingService&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onNewToken&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Refreshed token: $token"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onMessageReceived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;RemoteMessage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onMessageReceived&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;date&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toInt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;message&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dao&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;NotificationsDAO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;dao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createNotification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MyNotification&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//MySQLにデータを格納している（説明は省略）&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そして&lt;code&gt;MainActivity.kt&lt;/code&gt;は以下のとおり．&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onStart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onStart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;dao&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;NotificationsDAO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getExtras&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;date&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getExtras&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"date"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;toInt&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;message&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;intent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getExtras&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"message"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;dao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createNotification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;MyNotification&lt;/span&gt;&lt;span class="p"&gt;(-&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//SQLiteにデータを格納している（説明は省略）&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;messageList&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dao&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;//SQLiteからデータを全件取得してきている（説明は省略）&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;listView&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ListView&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;findViewById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listView&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;listView&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;MessageListAdapter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;android&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;simple_list_item_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;messageList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この状態でサーバからリクエストを発出したところ，期待どおり通知が飛び，かつ図1のとおり，そのデータがAndroid側のSQLiteに格納されることを確認できた．（&lt;code&gt;ListView&lt;/code&gt;の表示が整形されているのは&lt;code&gt;MessageListAdapter&lt;/code&gt;クラスによるもの．今回は説明を省略する）&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F494245%2F8cd59864-a3be-09ac-036e-81456f45df54.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=4f01149a497a3b0f3b99ca2b2f5036fa" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F494245%2F8cd59864-a3be-09ac-036e-81456f45df54.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=4f01149a497a3b0f3b99ca2b2f5036fa" alt="Screenshot_20200628-150346.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/494245/8cd59864-a3be-09ac-036e-81456f45df54.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F494245%2F8cd59864-a3be-09ac-036e-81456f45df54.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=691e3e7c31b18a9e20a28233499d4bf3 1x" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
図1 データ受信後のアプリの表示．&lt;/p&gt;

&lt;p&gt;一通りやりたいことは確認できたので，今回の調査は一旦これで終わり．&lt;/p&gt;
</content>
    <author>
      <name>nk5jp</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1253876</id>
    <published>2020-06-28T11:33:53+09:00</published>
    <updated>2020-06-28T11:33:53+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/tama_Ud/items/bcc668d7c00bc742ad7f"/>
    <url>https://qiita.com/tama_Ud/items/bcc668d7c00bc742ad7f</url>
    <title>【Kotlin】Firebase + CameraX でリアルタイム文字認識</title>
    <content type="html">&lt;p&gt;Firebase ML Kit + CameraX でリアルタイム文字認識してBottomSheetに表示します。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="デモ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%87%E3%83%A2"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;デモ&lt;/h1&gt;

&lt;p&gt;完成形はこんな感じです。&lt;br&gt;
&lt;/p&gt;&lt;blockquote class="twitter-tweet"&gt;
&lt;p&gt;CameraX+MLkitでリアルタイム文字認識 &lt;a href="https://t.co/rjxxYrfIb4" rel="nofollow noopener" target="_blank"&gt;pic.twitter.com/rjxxYrfIb4&lt;/a&gt;&lt;/p&gt;— marica (@tama_Ud) &lt;a href="https://twitter.com/tama_Ud/status/1277065359669907457?ref_src=twsrc%5Etfw" rel="nofollow noopener" target="_blank"&gt;June 28, 2020&lt;/a&gt;
&lt;/blockquote&gt; &lt;script async src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt;

&lt;h1&gt;
&lt;span id="おおまかな処理の流れ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%8A%E3%81%8A%E3%81%BE%E3%81%8B%E3%81%AA%E5%87%A6%E7%90%86%E3%81%AE%E6%B5%81%E3%82%8C"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;おおまかな処理の流れ&lt;/h1&gt;

&lt;p&gt;カメラ起動&lt;br&gt;
↓&lt;br&gt;
MLKitでリアルタイム文字認識&lt;br&gt;
↓&lt;br&gt;
BottomSheetに認識したテキストをリアルタイム表示&lt;/p&gt;

&lt;h1&gt;
&lt;span id="さっそく作る" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%95%E3%81%A3%E3%81%9D%E3%81%8F%E4%BD%9C%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;さっそく作る&lt;/h1&gt;

&lt;h4&gt;
&lt;span id="開発環境" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;開発環境&lt;/h4&gt;

&lt;p&gt;・Windows 10&lt;br&gt;
・Android Studio 3.6.3&lt;/p&gt;

&lt;h4&gt;
&lt;span id="事前準備" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;事前準備&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. Firebaseの設定&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;今回はテキスト認識とラベリングを使用します。&lt;br&gt;
以下URLを参照して設定してください。&lt;/p&gt;

&lt;p&gt;・テキスト認識&lt;br&gt;
&lt;a href="https://firebase.google.com/docs/ml-kit/android/recognize-text?hl=ja" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://firebase.google.com/docs/ml-kit/android/recognize-text?hl=ja&lt;/a&gt;&lt;br&gt;
今回はデバイスモデルを使用します。&lt;br&gt;
デバイスモデルで認識可能な言語はラテン文字のみです。&lt;br&gt;
その他日本語などを認識したい場合はクラウドモデルを使いましょう。（月1000回まで無料のようです）&lt;/p&gt;

&lt;p&gt;・ラベリング&lt;br&gt;
&lt;a href="https://firebase.google.com/docs/ml-kit/android/label-images?hl=ja" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://firebase.google.com/docs/ml-kit/android/label-images?hl=ja&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. CameraXの設定&lt;/strong&gt; &lt;/p&gt;

&lt;p&gt;build.gradle(Module.app)ファイルのdependenciesブロックに以下を追記します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;build.gradle(Module.app)&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;dependencies&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;…&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;camerax_version&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"1.0.0-beta03"&lt;/span&gt;
    &lt;span class="c1"&gt;// CameraX core library using camera2 implementation&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s"&gt;"androidx.camera:camera-camera2:$camerax_version"&lt;/span&gt;
    &lt;span class="c1"&gt;// CameraX Lifecycle Library&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s"&gt;"androidx.camera:camera-lifecycle:$camerax_version"&lt;/span&gt;
    &lt;span class="c1"&gt;// CameraX View class&lt;/span&gt;
    &lt;span class="n"&gt;implementation&lt;/span&gt; &lt;span class="s"&gt;"androidx.camera:camera-view:1.0.0-alpha10"&lt;/span&gt;
    &lt;span class="err"&gt;…&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;同じくbuild.gradle(Module.app)ファイルのandroidブロック末尾に以下を追記します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;build.gradle(Module.app)&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;android&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;…&lt;/span&gt;
    &lt;span class="nf"&gt;compileOptions&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sourceCompatibility&lt;/span&gt; &lt;span class="nc"&gt;JavaVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;VERSION_1_8&lt;/span&gt;
        &lt;span class="n"&gt;targetCompatibility&lt;/span&gt; &lt;span class="nc"&gt;JavaVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;VERSION_1_8&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;
&lt;span id="3-androidmanifestに追記" class="fragment"&gt;&lt;/span&gt;&lt;a href="#3-androidmanifest%E3%81%AB%E8%BF%BD%E8%A8%98"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;3. AndroidManifestに追記&lt;/h4&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;AndroidManifest.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="na"&gt;package=&lt;/span&gt;&lt;span class="s"&gt;"com.websarva.wings.android.your_project_name"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;uses-feature&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.hardware.camera.any"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.permission.CAMERA"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;uses-permission&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"android.permission.WRITE_EXTERNAL_STORAGE"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;application&lt;/span&gt;
     &lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
     …
    &lt;span class="nt"&gt;&amp;lt;meta-data&lt;/span&gt;
        &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;"com.google.firebase.ml.vision.DEPENDENCIES"&lt;/span&gt;
        &lt;span class="na"&gt;android:value=&lt;/span&gt;&lt;span class="s"&gt;"ocr, label"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;以上を書き込んだらAndroidStudioの "SyncNow" ボタンをクリックし、無事ビルドされることを確認します。&lt;/p&gt;

&lt;h4&gt;
&lt;span id="レイアウトを作成する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%AC%E3%82%A4%E3%82%A2%E3%82%A6%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;レイアウトを作成する&lt;/h4&gt;

&lt;p&gt;activity_mainの内容を以下に置き換えます。&lt;br&gt;
LinearLayoutでBottomSheetを作っています。&lt;/p&gt;

&lt;div class="code-frame" data-lang="xml"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;activity_main.xml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version="1.0" encoding="utf-8"?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;androidx.coordinatorlayout.widget.CoordinatorLayout&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:tools=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/tools"&lt;/span&gt;
    &lt;span class="na"&gt;xmlns:app=&lt;/span&gt;&lt;span class="s"&gt;"http://schemas.android.com/apk/res-auto"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="na"&gt;tools:context=&lt;/span&gt;&lt;span class="s"&gt;".MainActivity"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;androidx.camera.view.PreviewView&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/viewFinder"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;LinearLayout&lt;/span&gt;
        &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/bottomSheetLayout"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"match_parent"&lt;/span&gt;
        &lt;span class="na"&gt;android:background=&lt;/span&gt;&lt;span class="s"&gt;"@color/cardview_light_background"&lt;/span&gt;
        &lt;span class="na"&gt;android:orientation=&lt;/span&gt;&lt;span class="s"&gt;"vertical"&lt;/span&gt;
        &lt;span class="na"&gt;app:behavior_hideable=&lt;/span&gt;&lt;span class="s"&gt;"false"&lt;/span&gt;
        &lt;span class="na"&gt;app:behavior_peekHeight=&lt;/span&gt;&lt;span class="s"&gt;"200dp"&lt;/span&gt;
        &lt;span class="na"&gt;app:layout_behavior=&lt;/span&gt;&lt;span class="s"&gt;"@string/bottom_sheet_behavior"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="nt"&gt;&amp;lt;TextView&lt;/span&gt;
            &lt;span class="na"&gt;android:id=&lt;/span&gt;&lt;span class="s"&gt;"@+id/bottomSheetText"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_width=&lt;/span&gt;&lt;span class="s"&gt;"300dp"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_gravity=&lt;/span&gt;&lt;span class="s"&gt;"center"&lt;/span&gt;
            &lt;span class="na"&gt;android:layout_height=&lt;/span&gt;&lt;span class="s"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/LinearLayout&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h4&gt;
&lt;span id="メイン処理を書く" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%A1%E3%82%A4%E3%83%B3%E5%87%A6%E7%90%86%E3%82%92%E6%9B%B8%E3%81%8F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;メイン処理を書く&lt;/h4&gt;

&lt;p&gt;大枠としてはこんな感じです。&lt;br&gt;
これから具体的な処理を肉付けしていきます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;MainActivity.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;
&lt;span class="k"&gt;typealias&lt;/span&gt; &lt;span class="nc"&gt;ODetection&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;odt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;TAG&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"CameraXBasic"&lt;/span&gt;

&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MainActivity&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;AppCompatActivity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;companion&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;TAG&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"CameraXBasic"&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;REQUEST_CODE_PERMISSIONS&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;REQUIRED_PERMISSIONS&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;arrayOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Manifest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permission&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CAMERA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO: not yet implement&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="c1"&gt;//MARK:  ===== カメラ起動 =====&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;startCamera&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO: not yet implement&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ImageAnalyze&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ODetection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;ImageAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Analyzer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//TODO: not yet implement&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;カメラの処理を書いていきます。&lt;br&gt;
onCreate内に以下の処理を書き足します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;onCreate(MainActivity.kt)&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Bundle&lt;/span&gt;&lt;span class="p"&gt;?)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;savedInstanceState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nf"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;activity_main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// BottomSheetを設定&lt;/span&gt;
        &lt;span class="n"&gt;bottomSheetBehavier&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;BottomSheetBehavior&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bottomSheetLayout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;// Request camera permissions&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;allPermissionsGranted&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nf"&gt;startCamera&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;ActivityCompat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;requestPermissions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;REQUIRED_PERMISSIONS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;REQUEST_CODE_PERMISSIONS&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// Setup the listener for take photo button&lt;/span&gt;
        &lt;span class="n"&gt;outputDirectory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;getOutputDirectory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cameraExecutor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Executors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;newSingleThreadExecutor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;onCreateの下に以下のメソッドを書き足します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;MainActivity.kt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;onRequestPermissionsResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;requestCode&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;permissions&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;,&lt;/span&gt; &lt;span class="n"&gt;grantResults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nc"&gt;IntArray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requestCode&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;REQUEST_CODE_PERMISSIONS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;allPermissionsGranted&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nf"&gt;startCamera&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;makeText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;"Permissions not granted by the user."&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="nc"&gt;Toast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="nf"&gt;finish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;allPermissionsGranted&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;REQUIRED_PERMISSIONS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;all&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nc"&gt;ContextCompat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;checkSelfPermission&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;baseContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="nc"&gt;PackageManager&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;PERMISSION_GRANTED&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;getOutputDirectory&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;File&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mediaDir&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;externalMediaDirs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;firstOrNull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nc"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;R&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app_name&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;apply&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nf"&gt;mkdirs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mediaDir&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mediaDir&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;mediaDir&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;filesDir&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;startCamera内に以下を書き足します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;startCamera(MainActivity.kt)&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;startCamera&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cameraProviderFuture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ProcessCameraProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;frameLayout&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;FrameLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cameraProviderFuture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Runnable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Used to bind the lifecycle of cameras to the lifecycle owner&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cameraProvider&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ProcessCameraProvider&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cameraProviderFuture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="c1"&gt;// Preview&lt;/span&gt;
            &lt;span class="n"&gt;preview&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Preview&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;imageCapture&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ImageCapture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setCaptureMode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ImageCapture&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;CAPTURE_MODE_MINIMIZE_LATENCY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;imageAnalyzer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ImageAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setBackpressureStrategy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;ImageAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;STRATEGY_KEEP_ONLY_LATEST&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;also&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="c1"&gt;// OCRの結果&lt;/span&gt;
                    &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setAnalyzer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cameraExecutor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;ImageAnalyze&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;txtArr&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;showTxt&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
                        &lt;span class="n"&gt;frameLayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;removeAllViews&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;txtArr&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                            &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;let&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;showTxt&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;" $txt"&lt;/span&gt;
                            &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="n"&gt;bottomSheetText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;showTxt&lt;/span&gt;
                        &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"listener fired!: $showTxt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;})&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

            &lt;span class="c1"&gt;// Select back camera&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;cameraSelector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;CameraSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;requireLensFacing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CameraSelector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;LENS_FACING_BACK&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;// Unbind use cases before rebinding&lt;/span&gt;
                &lt;span class="n"&gt;cameraProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unbindAll&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

                &lt;span class="c1"&gt;// Bind use cases to camera&lt;/span&gt;
                &lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cameraProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bindToLifecycle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cameraSelector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageCapture&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageAnalyzer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;preview&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="nf"&gt;setSurfaceProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;viewFinder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;createSurfaceProvider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;camera&lt;/span&gt;&lt;span class="o"&gt;?.&lt;/span&gt;&lt;span class="n"&gt;cameraInfo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Use case binding failed"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="nc"&gt;ContextCompat&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getMainExecutor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;画像処理部分を書いていきます。&lt;br&gt;
インナークラスであるImageAnalyzeに以下を追記します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;ImageAnalyze(MainActivity.kt)&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ImageAnalyze&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ODetection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;ImageAnalysis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Analyzer&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;options&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;FirebaseVisionOnDeviceImageLabelerOptions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;Builder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;setConfidenceThreshold&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0.7f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;build&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;labeler&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;FirebaseVision&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;getOnDeviceImageLabeler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;detector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;FirebaseVision&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;getInstance&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onDeviceTextRecognizer&lt;/span&gt;

        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;degreesToFirebaseRotation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;FirebaseVisionImageMetadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ROTATION_0&lt;/span&gt;
            &lt;span class="m"&gt;90&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;FirebaseVisionImageMetadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ROTATION_90&lt;/span&gt;
            &lt;span class="m"&gt;180&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;FirebaseVisionImageMetadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ROTATION_180&lt;/span&gt;
            &lt;span class="m"&gt;270&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;FirebaseVisionImageMetadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ROTATION_270&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="nc"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Rotation must be 0, 90, 180, or 270."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;// フレームごとに呼ばれる&lt;/span&gt;
        &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;analyze&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ImageProxy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Pass image to an ML Kit Vision API&lt;/span&gt;
            &lt;span class="nf"&gt;doObjectClassification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;さらにImageAnalyzeクラスにラベリング用処理を書き足します。&lt;br&gt;
認識結果が "Paper" の時のみOCR処理が走るようにします。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;ImageAnalyze(MainActivity.kt)&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="c1"&gt;// 画像分類&lt;/span&gt;
        &lt;span class="nd"&gt;@SuppressLint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"UnsafeExperimentalUsageError"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;doObjectClassification&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ImageProxy&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;mediaImage&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;?:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;imageRotation&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;degreesToFirebaseRotation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imageInfo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotationDegrees&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;image&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;FirebaseVisionImage&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fromMediaImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mediaImage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imageRotation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;labeler&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;processImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addOnSuccessListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="c1"&gt;// Task completed successfully&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;text&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
                        &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"text: $text"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"Paper"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="nf"&gt;doTextRecognition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                            &lt;span class="c1"&gt;// do something&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                    &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addOnFailureListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="c1"&gt;// Task failed with an exception&lt;/span&gt;
                    &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                    &lt;span class="n"&gt;proxy&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;さらにImageAnalyzeクラスにテキスト認識用処理とパース処理を書き足して完成です。&lt;br&gt;
Runしてみましょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;ImageAnalyze(MainActivity.kt)&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;
        &lt;span class="c1"&gt;//文字認識 - 書類に書かれた文字のみ認識する&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;doTextRecognition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;FirebaseVisionImage&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;detector&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;processImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addOnSuccessListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;firebaseVisionText&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="c1"&gt;// Task completed successfully&lt;/span&gt;
                    &lt;span class="nf"&gt;parseResultText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;firebaseVisionText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"OCR Succeeded!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;addOnFailureListener&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class="c1"&gt;// Task failed with an exception&lt;/span&gt;
                    &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"OCR Failed..."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;e&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;TAG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;// パース - OCRで認識された文字列をParseする&lt;/span&gt;
        &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;parseResultText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;FirebaseVisionText&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;resultTxtList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nc"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;String&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nf"&gt;arrayOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textBlocks&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;blockText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
                &lt;span class="n"&gt;resultTxtList&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;blockText&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="nc"&gt;Log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"RESULT_TEXT"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;resultTxtList&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;toString&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="nf"&gt;listener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resultTxtList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
&lt;span id="さいごに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;さいごに&lt;/h3&gt;

&lt;p&gt;CameraX + FIrebaseの組み合わせでかんたんにリアルタイム画像処理アプリが作れました。&lt;br&gt;
従来のCameraライブラリよりもより楽に実装することができるので、今後も使っていきたいです。&lt;/p&gt;
</content>
    <author>
      <name>tama_Ud</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1253099</id>
    <published>2020-06-27T09:48:05+09:00</published>
    <updated>2020-06-27T10:52:08+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/sdkei/items/72d011abf320e6d88839"/>
    <url>https://qiita.com/sdkei/items/72d011abf320e6d88839</url>
    <title>【Kotlin】擬似的に参照渡し（≠参照の値渡し）</title>
    <content type="html">&lt;p&gt;Kotlin には参照渡し（≠参照の値渡し）がない&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote" title="少なくとも Kotlin/common および Kotlin/JVM には。Kotlin/native とかだったらあるのかも？"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;参考：「参照渡し」と「参照の値渡し」の違いについて&lt;br&gt;
→&lt;a href="https://qiita.com/mdstoy/items/2ef4ada6f88341466783" id="reference-e12806abd94c169b20c1"&gt;もう参照渡しとは言わせない&lt;/a&gt;&lt;br&gt;
→&lt;a href="https://qiita.com/ur_kinsk/items/949dabe975bdc1affb82" id="reference-288cba86c7c3ff054519"&gt;値渡しと参照渡しと参照の値渡しと&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;例えば次のコードのような、&lt;br&gt;
ある関数に変数を渡してそこに保持されている値を書き換えてもらう、&lt;br&gt;
ということはできない。&lt;/p&gt;

&lt;div class="code-frame" data-lang="Kotlin"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;期待通りにならないコード&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="nf"&gt;countUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// 1 が出力されることを期待&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;countUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="c1"&gt;// そもそもここでコンパイルエラーになる。&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;そこで参照渡しを擬似的に実現するクラスを作成した。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="擬似的に参照渡しを実現するクラス簡易版" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%93%AC%E4%BC%BC%E7%9A%84%E3%81%AB%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E7%B0%A1%E6%98%93%E7%89%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;擬似的に参照渡しを実現するクラス（簡易版）&lt;/h2&gt;

&lt;div class="code-frame" data-lang="Kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * 擬似的に参照渡しを行うためのクラス。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * &lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * @param get 参照先の値を取得する関数。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * @param set 参照先の値を設定する関数。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;(&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/** 参照先の値を取得・設定するプロパティ。 */&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用例：&lt;/p&gt;

&lt;div class="code-frame" data-lang="Kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;countRef&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nf"&gt;countUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;gt; 1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;countUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;コンストラクター引数にゲッターとセッターを書いて渡してやらないといけないのがちょっと面倒。&lt;br&gt;
→&lt;a href="https://qiita.com/sdkei/items/72d011abf320e6d88839#comment-351742c36be94ecf8c96"&gt;コメント参照&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
&lt;span id="擬似的に参照渡しを実現するクラス高機能版" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%93%AC%E4%BC%BC%E7%9A%84%E3%81%AB%E5%8F%82%E7%85%A7%E6%B8%A1%E3%81%97%E3%82%92%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%B9%E9%AB%98%E6%A9%9F%E8%83%BD%E7%89%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;擬似的に参照渡しを実現するクラス（高機能版）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;読み取り専用版を作成：&lt;br&gt;
&lt;code&gt;set&lt;/code&gt; が不要であっても書かなければならず面倒であるとか、&lt;br&gt;
そもそも元の値が &lt;code&gt;val&lt;/code&gt; であるため &lt;code&gt;set&lt;/code&gt; を定義できないというような問題に対応。

&lt;ul&gt;
&lt;li&gt;書き込み専用は不要と判断。Kotlin ではプロパティを書き込み専用にすることができないし。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;インターフェイスを定義：&lt;br&gt;
別の実装を使える。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;invoke&lt;/code&gt; 演算子をオーバーロード：&lt;br&gt;
&lt;code&gt;ref.value&lt;/code&gt; と書くのが面倒な場合に &lt;code&gt;ref()&lt;/code&gt; のように短く書ける。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="code-frame" data-lang="Kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * 擬似的に読み取り専用の参照渡しを行うためのクラス。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; *&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * @param get 参照先の値を取得する関数。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;ReadonlyRef&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/** 参照先の値を取得するプロパティ。 */&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;
    &lt;span class="cm"&gt;/** 参照先の値を取得する関数。 */&lt;/span&gt;
    &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * 擬似的に参照渡しを行うためのクラス。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; *&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * @param get 参照先の値を取得する関数。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * @param set 参照先の値を設定する関数。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kd"&gt;interface&lt;/span&gt; &lt;span class="nc"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;ReadonlyRef&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/** 参照先の値を取得・設定するプロパティ。 */&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;
    &lt;span class="cm"&gt;/** 参照先の値を設定する関数。 */&lt;/span&gt;
    &lt;span class="k"&gt;operator&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * 擬似的に読み取り専用の参照渡しを行うためのオブジェクトを生成して返す。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; *&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * @param get 参照先の値を取得する関数。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;ReadonlyRef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;ReadonlyRef&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;ReadonlyRef&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * 擬似的に参照渡しを行うためのオブジェクトを生成して返す。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; *&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * @param get 参照先の値を取得する関数。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; * @param set 参照先の値を設定する関数。&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Unit&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="nc"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;object&lt;/span&gt; &lt;span class="err"&gt;: &lt;/span&gt;&lt;span class="nc"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;
        &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;invoke&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用例（簡易版と同じ）：&lt;/p&gt;

&lt;div class="code-frame" data-lang="Kotlin"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="py"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
    &lt;span class="kd"&gt;val&lt;/span&gt; &lt;span class="py"&gt;countRef&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="nf"&gt;countUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;countRef&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nf"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// &amp;gt; 1&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;fun&lt;/span&gt; &lt;span class="nf"&gt;countUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nc"&gt;Ref&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;++&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;／以上&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;少なくとも Kotlin/common および Kotlin/JVM には。Kotlin/native とかだったらあるのかも？ &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
    <author>
      <name>sdkei</name>
    </author>
  </entry>
</feed>
